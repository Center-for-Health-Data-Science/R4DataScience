---
title: "Exercise 5B - Models and Model Evaluation in R"
format: html
project:
 type: website
 output-dir: ../docs
---

## Introduction

In this exercise you will try to implement a Penalized Regression model in R.

For modelling we will use the [Obstetrics and Periodontal Therapy Dataset](https://higgi13425.github.io/medicaldata/reference/opt.html), which was collected in a randomized clinical trial. The trail was concerned with the effects of treatment of maternal periodontal disease and if it may reduce preterm birth risk.

This dataset has a total of 823 observations and 171 variables. As is often the case with clinical data, the data has many missing values, and for most categorical variables there is an unbalanced in number of observations for each level.

In order for you to not spend too much time on data cleaning and wrangling we have selected 33 variables (plus a patient ID column, `PID`) for which we have just enough observations per group level. As LASSO cannot handle NAs we have imputed missing values, and we have removed a few outlier samples.

1.  Load th R packages needed for analysis:

```{r, warning=FALSE, message=FALSE}
library(tidyverse)
library(caret)
library(glmnet)
library(MASS)
```

Note that you may have some clashes of function names between these packages. Because of this, you will need to specify the package you are calling some of the functions from, you do this with the package name followed by two colons followed by the name of the function, e.g. `dplyr::select()`

## Summary Statistics

2.  Load in the dataset `Obt_Perio_ML.Rdata` and inspect it.

You can look at what the individual variables [here](https://higgi13425.github.io/medicaldata/reference/opt.html). The curated dataset contains five variables which may be regarded as outcomes, these are:

```         
GA.at.outcome - Gestational age at end of pregnancy (days)
Birthweight - Weight of baby at birth (grams)
Apgar1 - Apgar score, a summary of a newborn infant's 'appearance at birth, range: 0-10 
Apgar5 - Apgar score at 5 minutes, numeric, range: 0-10
Preg.ended...37.wk - Pregnancy ended before week 37, categorical (0 = no, 1 = yes)
Any.SAE. - Whether participant experienced any serious adverse events (Yes, No)
```

The remaining 28 variables we will consider as potential explanatory variables for these outcomes.

3.  Do some basic summary statistics. How many categorical variables and how many numeric variables do you have? Try to make distributional plots for a couple of your numeric variables (or all if you would like) to get a feel for some of the data distributions you have.

4.  Make count tables for all your categorical/factor variables, are they balanced?

## Part 1: Elastic Net Regression

Elastic Net regression is part of the family of penalized regressions, which also includes Ridge regression and LASSO regression. Penalized regressions are especially useful when dealing with many predictors, as they help eliminate less informative ones while retaining the important predictors, making them ideal for high-dimensional datasets. One of the key advantages of Elastic Net over other types of penalized regression is its ability to handle multicollinearity and situations where the number of predictors exceeds the number of observations.

As described above we have five variables which could be considered outcomes as these where all measured at the end of pregnancy. We can only work with one outcome at a time and we will pick `Preg.ended...37.wk`. This variable is a factor variable which denotes if a women gave birth prematurely (1=yes, 0=no).

5.  As you will use the response `Preg.ended...37.wk`, you should remove the other five outcome measures from your dataset.

6.  Elastic net regression can be sensitive to large differences in the range of numeric/integer variables, as such these variables should be scaled. Scale all numeric/integer variables in your dataset.

::: {.callout-tip collapse="true"}
## Hint

mutate(across(...))
:::

7.  Split your dataset into train and test set, you should have 75% of the data in the training set and 30% in the test set. How you chose to split is up to you, BUT afterwards you should ensure that for the categorical/factor variables all levels are represented in both sets.

8.  After dividing into train and test set pull out the response variable `Preg.ended...37.wk` into its own vector for both datasets, name these: `y_train` and `y_test`.

9.  Remove the response variable `Preg.ended...37.wk` from the train and test set, as well as `PID` (if you have not already done so), as we should obviously not use this for training or testing.

You will employ the package `glmnet` to perform Elastic Net Regression. The main function from this package is `glmnet()` which we will use to fit the model. Additionally, you will also perform cross validation with `cv.glmnet()` to obtain the best value of the model hyper-parameter, lambda (λ).

As we are working with a mix of categorical and numerical predictors, it is advisable to dummy-code the variables, you can easily do this by creating a model matrix for both test and train set.

10. Create the model matrix needed for input to `glmnet()` and `cv.glmnet()`. See pseudo-code below:

```{r eval=FALSE}
modTrain <- model.matrix(~ .- 1, data = train)
modTest <- model.matrix(~ .- 1, data = test)
```

Note that the `- 1` in the `model.matrix()` formula which means, drop the intercept from the matrix.

11. Create your Elastic Net Regression model with `glmnet()`.

::: {.callout-tip collapse="true"}
## Hint

As you are performing Elastic Net Regression, you set the mixing parameter alpha = 0.5. This gives you a 50/50 balance of the L1 (LASSO) and L2 (Ridge) penalties.
:::

12. Use `cv.glmnet()` to attain the best value of the hyperparameter lambda (λ). Remember to set a seed for reproducible results.

13. Plot all the values of lambda tested during cross validation by calling `plot()` on the output of your `cv.glmnet()`. Extract the best lambda value from the `cv.glmnet()` model and save it as an object.

Now, lets see how well your model performed.

14. Predict if a individual is likely to give birth before the 37th week using your model and your test set. See pseudo-code below.

15. Just like for the logistic regression model you can calculate the accuracy of the prediction by first converting the predicted probabilities back into class labels (0, 1) and then comparing these to `y_test` with `confusionMatrix()`. Do you have a good accuracy? N.B look at the 2x2 contingency table, what does it tell you?

16. Lastly, lets extract the variables which were retained in the model (e.g. not penalized out). We do this by calling the coefficient with `coef()` on our model. See pseudo-code below.

```{r eval=FALSE}
coeffs <- coef(mode, s = bestLambda)

# Convert coefficients to a data frame for easier viewing
coeffsDat <- as.data.frame(as.matrix(coeffs))
 
```

16. Make a plot that shows the absolute importance of the variables retained in your model. This could be barplot with variable names on the x-axis and the height of the bars denoting absolute size of coefficient).

17. Make a logistic regression using this same dataset (you already have your train data, test data, y_train and y_test). Do you get similar results?
