---
title: "Exercise 2: Summary Statistics"
format: html
project:
 type: website
 output-dir: ../docs
---

In this exercise you will do some more advance tidyverse operations such as pivoting and nesting.

## Getting started

1.  Load packages.

2.  Load the joined diabetes data set you created in exercise 1 (e.g. "diabetes_join.xlsx") and the glucose dataset `df_glucose.xlsx` from the data folder.

## Wrangling

3.  Have a look at the glucose dataset. It has three columns with measurements from a Oral Glucose Tolerance Test where blood glucose is measured at fasting (Glucose_0), 1 hour/60 mins after glucose intake (Glucose_6), and 2 hours/120 mins after (Glucose_120). The last columns is an ID column. Change the data type of the ID column to `factor` in both `diabetes_join` and `df_glucose`.

4.  Restructure the glucose dataset into a long format. Name the column that describes which measurement the row refers to, i.e. Glucose_0, Glucose_60 or Glucose_120, `Measurement`. How many rows are there per ID? Does that make sense?

5. In your long format dataframe you should have one column that described which measurement the row refers to, i.e. Glucose_0, Glucose_60 or Glucose_120. Transform this column so that you only have the numerical part, i.e. **only** 0, 60 or 120. Then change the data type of that column to `factor`. Check the order of the factor levels and if necessary change them to the proper order.

::: {.callout-tip collapse="true"}
## Hint
The `stringr` packages is a part of tidyverse and has many functions for manipulating strings. Find a function that can **split** the string so you can extract the numbers on the other side of the underscore. 

Have a look at the help for factors `?factors` to see how to influence the levels.
:::

6. Merge the long formatted glucose dataset you made in **4** with the joined diabetes dataset you loaded in **2**.

7.  Pull the glucose measurements from your favorite ID.

8. Calculate the mean glucose measure for each measurement time point.

9. Calculate mean and standard deviation for all numeric columns.

::: {.callout-tip collapse="true"}
## Hint
You will need to use `summarise()` and `across()`, selecting numeric columns.
:::

10. Nest the glucose measurements and values such that there is only one row per ID and call the nested column OGTT (Oral Glucose Tolerance Test). Display the resulting tibble to confirm that you have succeeded.

::: {.callout-tip collapse="true"}
## Hint

Remember the flow:

```{r eval = FALSE}
group_by() %>% 
  nest() %>% 
  ungroup()
```

:::

11. Export the final dataset. Since the dataset is nested, you cannot export it as an excel file. Export the dataset as an `.rds` file. Have a guess at what the function is called.

## Simple plotting

Before we move on, let's refresh the plotting package in tidyverse: `ggplot2`. 

12. For p1, plot the density of the glucose measurements at time 0. For p2, make the same plot as p1 but add stratification on the diabetes status. Give the plot a meaningful title. Consider the densities - do they make sense?
```{r}
p1 <- # code for p1

p2 <- # code for p2

# Get plots side by side.
library(patchwork)
p1 + p2 + plot_annotation(title = "TITLE")
```

13. Do the same for the glucose measurements at time 60.

14. Now, create one plot for the glucose measurement where the densities are stratified on measurement time (0, 60, 120) and diabetes status (0, 1). You should see 6 density curves in your plot. 

::: {.callout-tip collapse="true"}
## Hint
There two ways of stratifying a density plot in ggplot2: `color` and `linetype`.
:::


