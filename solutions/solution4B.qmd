---
title: "Exercise 4B - Solutions: Scripting in R - Functions"
format: html
project:
 type: website
 output-dir: ../docs
---

In this exercise you will practice creating and applying user-defined functions.

## Getting started

Load libraries and data

```{r message=FALSE, warning=FALSE}
library(tidyverse)
library(glue)
```

```{r}
diabetes_glucose <- read_rds('../out/diabetes_glucose.rds')
diabetes_glucose
```

## User defined Functions

1. Create a function named `calculate_risk_score()`. 

It should accept the following parameters:

* BloodPressure
* BMI
* Smoking
* PhysicalActivity

And it should calculate a risk score with the following rules:

* if BloodPressure is > 90, add 0.5
* if Smoking is 'Smoker', add 1
* if BMI is > 30, add 1. If BMI > 40, add 2.
* if PhysicalActivity is > 110, substract 1

The function should return the final risk score. Test it with some different inputs to verify that it works according to the rules detailed above. 


```{r}
calculate_risk_score <- function(BloodPressure, BMI, Smoking,PhysicalActivity){
  
  risk_score <- 0
  
  if (BloodPressure > 90){
    risk_score <- risk_score + 0.5
    }

  if (Smoking == 'Smoker'){
    risk_score <- risk_score + 1
    }
  
  #BMI > 30 includes BMIs that are larger than 40, so we need to be careful of
  #the order in which we check, or include that the BMI should be <= 40 in order 
  #to add 1.   
  
 if (BMI > 40){
    risk_score <- risk_score + 2
    } 
  else if( BMI > 30) {
    risk_score <- risk_score + 1
    } 
  
  if (PhysicalActivity > 110){
    risk_score <- risk_score - 1
    }
    
  return(risk_score)
  
}


```


```{r}
#demo
calculate_risk_score(120, 45, 'no', 115)
calculate_risk_score(120, 45, 'Smoker', 115)
calculate_risk_score(90, 35, 'Smoker', 60)

```


2. Add a check to your function whether the supplied parameters are numeric, except for Smoking which should be a factor or a character (you can check that too if you want to). Test that your check works correctly.


```{r error=TRUE}
calculate_risk_score <- function(BloodPressure, BMI, Smoking, PhysicalActivity){
  
  if (!is.numeric(BloodPressure) | !is.numeric(BMI) | !is.numeric(PhysicalActivity)) {
    stop("BloodPressure, BMI, and PhysicalActivity must be numeric values.")
  }
  
  if(! (is.character(Smoking) | is.factor(Smoking)) ){
    stop("Smoking should be a factor or character.")
  }
  
  risk_score <- 0
  
  if (BloodPressure > 90){
    risk_score <- risk_score + 0.5
    }

  if (Smoking == 'Smoker'){
    risk_score <- risk_score + 1
    }
  
  #BMI > 30 includes BMIs that are larger than 40, so we need to be careful of
  #the order in which we check, or include that the BMI should be <= 40 in order 
  #to add 1.   
  
 if (BMI > 40){
    risk_score <- risk_score + 2
    } 
  else if( BMI > 30) {
    risk_score <- risk_score + 1
    } 
  
  if (PhysicalActivity > 110){
    risk_score <- risk_score - 1
    }
    
  return(risk_score)
  
}

```

```{r}
calculate_risk_score('Hi', 35, 'Smoker', 60)
```

```{r}
calculate_risk_score(90, 35, 1, 60)
```

```{r}
calculate_risk_score(90, 35, 'Smoker', 60)
```

3.  Write code to apply your `calculate_risk_score` to each row in `diabetes_glucose`. Using the appropriate column, i.e. `diabetes_glucose$BloodPressure` should be the `BloodPressure` given to the function and so on. Add the calculated risk score to diabetes_glucose as a column `Risk_score`.

```{r}

for (i in 1:nrow(diabetes_glucose)) {
  
  risk_score <- calculate_risk_score(BloodPressure = diabetes_glucose$BloodPressure[i], 
                                     BMI = diabetes_glucose$BMI[i], 
                                     Smoking = diabetes_glucose$Smoker[i], 
                                     PhysicalActivity = diabetes_glucose$PhysicalActivity[i])
  
  diabetes_glucose[i, 'Risk_score'] <- risk_score
  
}

```

```{r}
diabetes_glucose
```


4. Now, run `calculate_risk_score` on each row in `diabetes_glucose` by using `mapply` instead. Confirm that your result is the same. 

```{r}
risk_scores <- mapply(FUN = calculate_risk_score, 
                      BloodPressure = diabetes_glucose$BloodPressure, 
                      BMI = diabetes_glucose$BMI,
                      Smoking = diabetes_glucose$Smoker,
                      PhysicalActivity = diabetes_glucose$PhysicalActivity)
```

A quick check confirms that the `risk_scores` vector contains the same as the column we previously added.

```{r}
all(risk_scores == diabetes_glucose$Risk_score)
```

5.  Create an R script file to contain your functions. Copy your functions there and remove them from your global environment with `rm(list="name_of_your_function")`. Now source the function R script in your quarto document and test that the functions work.

```{r}
#remove function from global environment so we can test if it loads properly from the script
rm(list = "calculate_risk_score")
```

Source the script we copied our `calculate_risk_score` function into:

```{r}
source('solution4B.R')
```

The function works still:

```{r}
calculate_risk_score(90, 35, 'Smoker', 60)
```

------------------------------------------------------------------------

## Extra exercises

These exercises will ask you to first perform some tidyverse operations. Once you succeeded, you should abstract your code into a function. 

We start by unnesting diabetes_glucose so you get back the Measurement and Glucose columns:

```{r}
diabetes_glucose_unnest <- diabetes_glucose %>%
  unnest(OGTT)
```

e1. Calculate the mean of `Glucose (mmol/L)` for each measuring time point across all patients. You should obtain 3 values, one for 0, one for 60 and one for 120. 

```{r}
diabetes_glucose_unnest %>%
  group_by(Measurement) %>%
  summarise(mean_gluc = mean( `Glucose (mmol/L)`))
```

e2. Now we would like to stratify this mean further by a second variable, Sex. We would like to obtain 6 means: 0_female, 0_male, 60_female, 60_male, 120_female, 120_male.

```{r}
diabetes_glucose_unnest %>%
  group_by(Measurement, Sex) %>%
  summarize(glucose_mean = mean(`Glucose (mmol/L)`))
```

e3. Now we would like to abstract the name of the second column. Imagine we would like means per marriage status or per workplace instead of per sex. Create a variable `column <- 'Sex'` and redo what you did above but using `column` instead of the literal name of the column (Sex). This works in the same way as when plotting with a variable instead of the literal column name. Have a look at presentation 4A if you don't remember how to do it.


```{r}
column <- 'Sex'

glucose_group_mean <- diabetes_glucose_unnest %>%
  group_by(Measurement, !!sym(column)) %>%
  summarize(glucose_mean = mean(`Glucose (mmol/L)`))

glucose_group_mean
```

e4. Now, make your code into a function `calc_mean_meta()` that can calculate means based on different meta data columns. It should be called like so `calc_mean_meta('Sex')` and give you the same result as before. Try it on other metadata columns in diabetes_glucose_unnest too!

```{r}
calc_mean_meta <- function(column){
  glucose_group_mean <- diabetes_glucose_unnest %>%
    group_by(Measurement, !!sym(column)) %>%
    summarize(glucose_mean = mean(`Glucose (mmol/L)`))
  
  return(glucose_group_mean)
}
```

```{r}
calc_mean_meta('Sex')
```


```{r}
calc_mean_meta('Work')
```
