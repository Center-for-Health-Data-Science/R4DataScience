---
title: "Exercise 2 - Solutions: Advanced Tidyveres"
format: html
project:
 type: website
 output-dir: ../docs
---

## Introduction

In this exercise you will do some more advance tidyverse operations such as pivoting and nesting, as well as create plots to brush up on your ggplot skills.

## First steps

1.  Load packages.

```{r message=FALSE}
library(tidyverse)
```

2.  Load the joined diabetes data set you created in exercise 1 and the glucose dataset from the data folder.

```{r}
diabetes_join <- readxl::read_excel('../out/diabetes_join.xlsx')
df_glucose <- readxl::read_excel('../data/df_glucose.xlsx')
```

3. Have a look at the glucose dataset. The `OGTT` column contains measurements from a Oral Glucose Tolerance Test where blood glucose is measured at fasting (Glucose_0), 6 hours after glucose intake (Glucose_6), and 12 hours after (Glucose_12). 

```{r}
head(df_glucose)
```


4. Restructure the glucose dataset into a long format. How many rows are there per ID? Does that make sense?

::: {.callout-tip collapse="true"}
## Hint

Remember the flow:

```{r eval = FALSE}
pivot_longer(cols = LIST_WITH_COLUMNS_TO_PIVOT,
             names_to = "NEW_COLUMN_CONTAINING_COLUMN_NAMES",
             values_to = "NEW_COLUMN_CONTAINING_COLUMN_VALUES")
```

Have a look at slide 16 for a visual overview.

:::

```{r}
df_glucose_long <- df_glucose %>% 
  pivot_longer(cols = starts_with("Glucose"),
               names_to = "Measurement",
               values_to = "Glucose (mmol/L)"
               )

head(df_glucose_long)
```

5. Change the glucose measurements to numeric variable.

::: {.callout-tip collapse="true"}
## Hint
The `stringr` packages is a part of tidyverse and has many functions for manipulating strings. Find a function that can **split** the string so you can extract the numbers on the other side of the underscore. 
:::

```{r}
df_glucose_long <- df_glucose_long %>% 
  mutate(Measurement = str_split_i(Measurement, '_', 2) %>% as.numeric())

head(df_glucose_long)
```

6. Nest the glucose measurements and values such that there is only one row per ID.

::: {.callout-tip collapse="true"}
## Hint

Remember the flow:

```{r eval = FALSE}
group_by() %>% 
  nest() %>% 
  ungroup()
```

:::

```{r}
df_glucose_nested <- df_glucose_long %>% 
  group_by(ID) %>% 
  nest(OGTT = c(Measurement, `Glucose (mmol/L)`)) %>% 
  ungroup()
  
head(df_glucose_nested)
```


7. Merge the nested glucose dataset with the joined diabetes. 
```{r}
diabetes_glucose <- diabetes_join %>% 
  left_join(df_glucose_nested, by = 'ID')

head(diabetes_glucose)
```

8. Pull the glucose measurements (`OGTT`) from your favorite ID. 

::: {.callout-tip collapse="true"}
## Hint
First `filter` for your favorite ID and then `pull` the nested column. 
:::

```{r}
diabetes_glucose %>% 
  filter(ID == 9046) %>% 
  pull(OGTT)
```



13. Export the final dataset. Since the dataset is nested, you cannot export it as an excel file. Export the dataset as an `.rds` file. Have a guess at what the function is called. 
```{r}
write_rds(diabetes_glucose, '../out/diabetes_glucose.rds')
```

