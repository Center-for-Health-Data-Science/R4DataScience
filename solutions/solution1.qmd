---
title: "Solution 1: Data Cleanup"
format: html
project:
 type: website
 output-dir: ../docs
---

## Getting started

1.  Load packages.

```{r message=FALSE, warning=FALSE}
library(tidyverse)
library(readxl)
```

2.  Load in the `diabetes_clinical_toy_messy.xlsx` data set.

```{r}
diabetes_clinical <- read_excel('../data/diabetes_clinical_toy_messy.xlsx')
head(diabetes_clinical)
```

## Explore the data

Use can you either base R or/and tidyverse to solve the exercises.

3.  How many missing values (NA's) are there in each column.

```{r}
colSums(is.na(diabetes_clinical))
```

4.  Check the ranges and distribution of each of the numeric variables in the dataset. Do any values seem weird or unexpected? Extract summary statistics on these, e.g. means and standard deviation.

For the numerical variables we'll plot and check the range:

```{r}
# Range
range(diabetes_clinical$Age, na.rm = TRUE)

# Histogram
diabetes_clinical$Age %>% hist()

# ggplot2 boxplot
diabetes_clinical %>% 
  ggplot(aes(y = Age, x = 1)) + 
  geom_boxplot(fill="steelblue") + 
  theme_minimal()
```

Odd: Some `BloodPressure` values are 0.

```{r}
range(diabetes_clinical$BloodPressure, na.rm = TRUE)

diabetes_clinical %>% 
  ggplot(aes(x = BloodPressure)) + 
  geom_histogram(color='black', fill='grey') + 
  theme_minimal()
```

Odd: Some `BMI` values are 0.

```{r}
range(diabetes_clinical$BMI, na.rm = TRUE)

diabetes_clinical %>% 
  ggplot(aes(y = BMI, x = 1)) + 
  geom_violin(fill="#ADC698") +
  geom_point() +
  theme_minimal()
```

```{r}
range(diabetes_clinical$PhysicalActivity, na.rm = TRUE)

diabetes_clinical %>% 
  ggplot(aes(y = PhysicalActivity)) + 
  geom_boxplot(color='black', fill='grey') + 
  theme_minimal()
```

```{r}
range(diabetes_clinical$Serum_ca2, na.rm = TRUE)

diabetes_clinical %>% 
  ggplot(aes(x = Serum_ca2)) + 
  geom_histogram(color='black', fill='#ADC698') + 
  theme_minimal()
```

Some summary statistics:

```{r}
diabetes_clinical %>%
  summarise(across(where(is.numeric), list(mean = mean, sd = sd), na.rm = TRUE))

# or alternatively

diabetes_clinical %>%
  select(where(is.numeric)) %>% 
  summary(.)
```

5.  Some variables in the dataset are categorical or factor variables. Figure out what levels these have and how many observations there are for each level.

For the categorical variables we can use `table()` (or if you prefer, `count()`):

The `Sex` values are not consistent.

```{r}
table(diabetes_clinical$Sex)
table(diabetes_clinical$Smoker)
table(diabetes_clinical$Diabetes)
```

## Clean up the data

Now that we have had a look at the data, it is time to correct fixable mistakes and remove observations that cannot be corrected.

Consider the following:

-   What should we do with the rows that contain NA's? Do we remove them or keep them?

-   Which odd things in the data can we correct with confidence and which cannot?

-   Are there zeros in the data? Are they true zeros or errors?

-   Do you want to change any of the classes of the variables?

6.  Make a clean version of the dataset according to your considerations.

::: {.callout-tip collapse="true"}
## Hint

Have a look at `BloodPressure`, `BMI`, and `Sex`.

:::

My considerations:

-   When modelling, rows with NA's in the variables we want to model should be removed as we cannot model on NAs. Since there are only NA's in `Age` and `BMI`, the rows can be left until we need to do a model with these columns.

-   The different spellings in `Sex` should be regularized so that there is only one spelling for each category. Since most rows have the first letter as capital letter and the remaining letter as lowercase we will use that.

-   There are zeros in `BMI` and `BloodPressure`. These are considered false zeros as is does not make sense that these variables have a value of 0.

Check number of rows before cleaning.

```{r}
nrow(diabetes_clinical)
```

Cleaning data according to considerations.

```{r}
diabetes_clinical_clean <- diabetes_clinical %>% 
  mutate(Sex = str_to_title(Sex)) %>% 
  filter(BMI != 0, BloodPressure != 0) 
```

Check the variables that were altered
```{r}
# Unique sexes now
diabetes_clinical_clean$Sex %>% unique()

# Range of BMI and blood pressure
range(diabetes_clinical_clean$BMI, na.rm = TRUE)
range(diabetes_clinical_clean$BloodPressure, na.rm = TRUE)
```

Check number of rows after cleaning.

```{r}
nrow(diabetes_clinical_clean)
```

## Metadata

7.  There is some metadata to accompany the dataset you have just cleaned in `diabetes_meta_toy_messy.csv`. This is a csv file, not an excel sheet, so you need to use the `read_delim()` function to load it. Load in the dataset and inspect it.

```{r message=FALSE}
diabetes_meta <- read_delim('../data/diabetes_meta_toy_messy.csv')
head(diabetes_meta)
```

7.1. How many missing values (NA's) are there in each column.

```{r}
colSums(is.na(diabetes_meta))
```

7.2. Check the distribution of each of the variables. Consider that the variables are of different classes. Do any of the distributions seam odd to you?

For the categorical variables:

```{r}
table(diabetes_meta$Married)
table(diabetes_meta$Work)
```

By investigating the unique values of the `Married` variable we see that some of the values have whitespace.

```{r}
unique(diabetes_meta$Married)
```

7.3. Make a clean version of the dataset according to your considerations.

My considerations:

-   The `Married` variable has whitespace in the some of the values. The values "Yes" and "Yes " will be interpreted as different values. We can confidently remove all the whitespaces in this variable.

Check number of rows before cleaning.

```{r}
nrow(diabetes_meta)
```

```{r}
diabetes_meta_clean <- diabetes_meta %>% 
  mutate(Married = str_trim(Married))
```

Check the unique marital status now.

```{r}
unique(diabetes_meta_clean$Married)
```

Check number of rows after cleaning.

```{r}
nrow(diabetes_meta_clean)
```

## Join the datasets

8.  Consider which variable the datasets should be joined on.

9.  Consider how you want to join the datasets. Do you want to use `full_join`, `inner_join`, `left_join` and `rigth_join`?

The joining variable must be the same type in both datasets.

10. Join the cleaned versions of the clinical and metadataset by the variable and with the function you considered above.

```{r}
# We use full_join to keep all observations before we know which variables we are interested in. 
diabetes_join <- diabetes_clinical_clean %>% 
  full_join(diabetes_meta_clean, by = 'ID')

nrow(diabetes_join)
```

11. How many rows does the joined dataset have? Explain how the join-function you used resulted in the given number of rows.

```{r}
# Because we used `full_join`, all the unique IDs across both data sets are kept.
c(diabetes_clinical_clean$ID, diabetes_meta_clean$ID) %>% 
  unique() %>% 
  length()

nrow(diabetes_join)
```

## Manipulate some strings

When we look at the column `Work`, we can see that we have three levels `Public`, `Private` and `Self-employed`. Some special characters, including: `- / \[\] (), etc.` can sometimes prove problematic in variable names, as they are also used for operations in R. For example, are dashes (`-`) used to indicate a contrast in some functions.

12. To avoid potential issues in downstream analysis, change the `Work` variable so that `Self-employed` becomes `SelfEmployed`.

```{r}
diabetes_join <- diabetes_join %>% 
  mutate(Work = str_replace_all(Work, '-e', 'E'))

table(diabetes_join$Work)
```

Additionally, we are not so happy with the fact that the `ID` is simply denoted by a number. The reason for this is that if we write out our dataset and read it in again (which we will do later), R will think it is a numeric or integer variable.

13. Add the string `ID_` in front of the number and convert it to a character variable.

```{r}
diabetes_join <-  diabetes_join %>% 
  mutate(ID = paste0("ID_", as.character(ID)))

head(diabetes_join$ID)
```

14. Export the joined dataset. Think about which directory you want to save the file in.

```{r}
writexl::write_xlsx(diabetes_join, '../out/diabetes_join.xlsx')
```
