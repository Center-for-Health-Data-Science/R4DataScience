---
title: "Exercise 3 - Solutions: ggplot2"
format: html
project:
 type: website
 output-dir: ../docs
---

## Getting started 

1. Load packages. 
```{r message=FALSE}
library(tidyverse)
```

2. Load data from the `.rds` you created. Have a guess at what the function is called. 
```{r}
diabetes_glucose <- read_rds('../out/diabetes_glucose.rds')
```

## Plotting - Part 1
We will have you make some basic plots to get you started with ggplot again. 

3. Make a scatter plot of Age and Blood Pressure Do you see a trend?
```{r}
diabetes_glucose %>% 
  ggplot(aes(x = BloodPressure, 
             y = Age)) + 
  geom_point() 
```

4. Make a scatter plot of `PhysicalActivity` and `BMI.` Do you see a trend?
```{r}
diabetes_glucose %>% 
  ggplot(aes(x = PhysicalActivity, 
             y = BMI)) + 
  geom_point() 
```

5. Now make the same two plots as above, and color by `Diabetes.` Do you see a trend?
```{r}
diabetes_glucose %>% 
  ggplot(aes(x = BloodPressure, 
             y = Age, 
             color = Diabetes)) + 
  geom_point()
```

```{r}
diabetes_glucose %>% 
  ggplot(aes(x = PhysicalActivity, 
             y = BMI, 
             color = Diabetes)) + 
  geom_point() 
```

6. Plot a boxplot of `BMI` across `Diabaetes.` Give the plot a meaningful title.
```{r}
diabetes_glucose %>% 
  ggplot(aes(y = BMI, 
             x = Diabetes, 
             color = Diabetes)) + 
  geom_boxplot() + 
  labs(title = 'Distribution of BMI Across Diabetes')
```

7. Plot a boxplot of `PhysicalActivity` across `Smoker`. Give the plot a meaningful title.
```{r}
diabetes_glucose %>% 
  ggplot(aes(y = PhysicalActivity, 
             x = Smoker, 
             fill = Smoker)) + 
  geom_boxplot() + 
  labs(title = 'Distribution of Physical Activity Across Smoker Status')
```



## Plotting - Part 2
For plotting the data inside the nested variable (glucose measurements) the data needs to be unnested. 

8. Boxplots of glucose measurements for time 0 across `Diabetes.` Give the plot a meaningful title.
```{r}
diabetes_glucose %>%
  unnest(OGTT) %>% 
  mutate(Measurement = Measurement %>% as.factor()) %>% 
  filter(Measurement == 0) %>% 
  ggplot(aes(y = `Glucose (mmol/L)`, 
             x = Diabetes, 
             color = Diabetes)) +
  geom_boxplot() + 
  labs(title = 'Glucose Measurement for Time Point 0 (fasted)')
```

9. Boxplots of glucose measurements across time points and `Diabetes.` Give the plot a meaningful title.
```{r}
diabetes_glucose %>%
  unnest(OGTT) %>% 
  mutate(Measurement = Measurement %>% as.factor()) %>% 
  ggplot(aes(y = `Glucose (mmol/L)`, 
             x = Diabetes, 
             color = Diabetes)) +
  geom_boxplot() + 
  facet_wrap(vars(Measurement)) + 
  labs(title = 'Glucose Measurements for Time Point 0, 60, and 120')
```

10. Create a figure that visualizes glucose measurements at each time point, stratified by patient ID. Give the plot a meaningful title.
```{r}
diabetes_glucose %>%
  unnest(OGTT) %>% 
  ggplot(aes(x = Measurement,
             y = `Glucose (mmol/L)`)) +
  geom_point(aes(color = Diabetes)) + 
  geom_line(aes(group = ID, color = Diabetes)) + 
  labs(title = 'Glucose Measurements Across Time Points by Diabetes Status')
```

11. Calculate the mean glucose measure for each measurement.

::: {.callout-tip collapse="true"}
## Hint
You will need to use `unnest()`, `group_by()`, and `summerize()`.
:::


```{r}
diabetes_glucose %>%
  unnest(OGTT) %>% 
  group_by(Measurement) %>% 
  summarize(`Glucose (mmol/L)` = mean(`Glucose (mmol/L)`))
```

12. Make the same calculation and stratify on Diabetes. 
```{r}
glucose_mean <- diabetes_glucose %>%
  unnest(OGTT) %>% 
  group_by(Measurement, Diabetes) %>%
  summarize(`Glucose (mmol/L)` = mean(`Glucose (mmol/L)`)) %>%
  ungroup()

glucose_mean
```

This next exercise might be a bit more challenging. It requires multiple operations and might involve some techniques that were not explicitly shown in the presentations. 

13. Recreate the plot you made in Exercise 10 and include the mean value for each glucose measurement for the two Diabetes statuses (0 and 1) like this:

![](../out/figure3_13.png){fig-align="center"}

::: {.callout-tip collapse="true"}
## Hint
There are several ways to solve this task. There is a workflow suggestion:

  - The line in the plot is connected by ID. Create new IDs for the mean values that do not already exist in the dataset. Use `RANDOM_ID %in% df$ID` to check if an ID is already present. 
  
  - Data from another dataset can be added to the plot like this: `+ geom_point(DATA, aes(x = VAR1, y = VAR2, group = VAR3))`

:::

The points in the plot is connected by ID. Let's find two ID's (one for `Diabetes == 0` and another for `Diabetes == 1`) that are not in the data. We can use the same numbers as the Diabetes status. 
```{r}
0 %in% diabetes_glucose$ID
1 %in% diabetes_glucose$ID
```

Change the class of Measurement to factor and add ID to the glucose mean data set. 
```{r}
glucose_mean <- glucose_mean %>% 
  mutate(ID = Diabetes %>% as.double())

glucose_mean
```

Copy-paste the code in Exercise 10 and add lines with new data. 
```{r}
diabetes_glucose %>%
  unnest(OGTT) %>% 
  ggplot(aes(x = Measurement,
             y = `Glucose (mmol/L)`)) +
  geom_point(aes(color = Diabetes)) + 
  geom_line(aes(group = ID, color = Diabetes)) + 
  # Glucose mean data
  geom_point(data = glucose_mean, 
             aes(x = Measurement, 
                 y = `Glucose (mmol/L)`, 
                 group = ID)) + 
  geom_line(data = glucose_mean, 
            aes(x = Measurement, 
                y = `Glucose (mmol/L)`, 
                group = ID, 
                linetype = Diabetes)) + 
  labs(title = "Glucose Measurements with Mean by Diabetes Status")

ggsave('../out/figure3_13.png')
```

## Plotting - Part 3: PCA 

For this part we will a tutorial to make a principal component analysis (PCA): https://cran.r-project.org/web/packages/ggfortify/vignettes/plot_pca.html. 
13. Have a look at your diabetes data set. Can you use all the variables to perform PCA? Subset the dataset to only include the relevant variables. 
WHAT TO DO WITH OGTT

::: {.callout-tip collapse="true"}
## Hint
PCA can only be performed on numerical values. Extract these (except ID) from the dataset.

:::

```{r}
numerical_columns <- sapply(diabetes_glucose, is.numeric)
numerical_columns['ID'] <- FALSE
diabetes_glucose_numerical <- diabetes_glucose[numerical_columns]
```


```{r}
diabetes_glucose_unnest_wide <- diabetes_glucose %>% 
  unnest(OGTT) %>% 
  pivot_wider(names_from = Measurement, 
              values_from = `Glucose (mmol/L)`, 
              names_prefix = "Measurement_"
              )

numerical_columns <- sapply(diabetes_glucose_unnest_wide, is.numeric)
numerical_columns['ID'] <- FALSE
diabetes_glucose_numerical <- diabetes_glucose_unnest_wide[numerical_columns]
```

14. Remove NAs
```{r}
diabetes_glucose_numerical_remove_NA <- drop_na(diabetes_glucose_numerical)
diabetes_glucose_remove_NA <- drop_na(diabetes_glucose, any_of(colnames(diabetes_glucose_numerical)))
```


15. Perform the **Plotting PCA (Principal Component Analysis)** part of the tutorial on your diabetes data. Think about which variables to color by. 

::: {.callout-tip collapse="true"}
## Hint

- Notice how you can use the arguments `color` and `colour` interchangeably. 

- 

:::

```{r}
library(ggfortify)

pca_res <- prcomp(diabetes_glucose_numerical_remove_NA, scale. = TRUE)

autoplot(pca_res, data = diabetes_glucose_remove_NA, color = "Diabetes")
```

```{r}
autoplot(pca_res, data = diabetes_glucose_remove_NA, colour = 'Diabetes', label = TRUE, label.size = 3)
```

```{r}
autoplot(pca_res, data = diabetes_glucose_remove_NA, colour = 'Diabetes', shape = FALSE, label.size = 3)
```

```{r}
autoplot(pca_res, data = diabetes_glucose_remove_NA, colour = 'Diabetes', loadings = TRUE)
```

```{r}
autoplot(pca_res, data = diabetes_glucose_remove_NA, colour = 'Diabetes',
         loadings = TRUE, loadings.colour = 'blue',
         loadings.label = TRUE, loadings.label.size = 3)
```

16. Make your last plot personal by adding a ggplot `theme`, title and whatever else you would like.

::: {.callout-note collapse="true"}
## Tip

Want to change the size of your plot: 

1. Copy-paste the plot-code to the console. 

2. Press *Export* â†’ *Copy to Clipboard...*

3. Drag the plot in the bottom-right corner to adjust the size.

4. Note down the width and the height and write the values to the `width` and `height` arguments of the `ggsave` function.

:::

```{r}
autoplot(pca_res, data = diabetes_glucose_remove_NA, colour = "Diabetes",
         loadings = TRUE, loadings.colour = "grey30", loadings.label.colour = "black",
         loadings.label = TRUE, loadings.label.size = 3.5) + 
  theme_minimal() + 
  labs(title = "PCA of Diabetes Dataset")

# ggsave('../figures/PCA_diabetes.png', width = 7, height = 5)
```

17. Render you document and review the html file.

