---
title: "Exercise 4 - Solutions"
format: html
project:
 type: website
 output-dir: ../docs
---

In this exercise you will practice your scripting. 

## Getting started

Load libaries and data

```{r message=FALSE, warning=FALSE}
library(tidyverse)
library(glue)
```

```{r}
diabetes_glucose <- read_rds('../out/diabetes_glucose.rds')
diabetes_glucose
```

## If-else statements

In these exercises we don't use the dataframe yet, that comes later when we have loops. For this part, just declare variables to test your statements, e.g. `bp <- 120`. 

1. Write an if-else statement that prints whether a person has high (more than 100), low (lower than 50) or normal blood pressure (between 50 and 100).

```{r}
bp <- 80

if (bp > 100){
  print('High blood pressure')
} else if (bp < 50) {
  print('Low blood pressure')
} else {
  print('Normal blood pressure')
} 

```
2. Write an if-else statement that assigns people high, moderate or low health risk based on their smoking habits (variable `smoker`) and BMI:

* Smoker and BMI greater than 35 -> high risk

* Smoker or BMI greater than 35 -> moderate risk

* otherwise low risk

And `smoker` should be one of "Smoker", "Former", "Never", "Unknown".

Verify that your statement works for different combinations of risk score and BMI

```{r}
Smoker <- 'Smoker'
BMI <- 40

if (Smoker == 'Smoker' & BMI > 35){
  print('High risk')
} else if (Smoker == 'Smoker' | BMI > 35) {
  print('Moderate risk')
} else {
  print('Low risk')
}

```

## Loops

3. Create a vector with at least 5 elements and loop over it.

```{r}
my_v <- c(1, 78, 5, 'hello', 7)

for (el in my_v) {
  print(el)
}

```


4. Loop over all column names of diabetes_glucose. 

::: {.callout-tip collapse="true"}
## Hint

`colnames(df)` creates a vector of column names.

:::


```{r}
for (col in colnames(diabetes_glucose)) {
  print(col)
}
```


5. Loop over all rows of diabetes_glucose and determine whether the person's blood pressure is high, low or normal with the same conditions as in 1.

```{r}
#We'll only show the first 10 rows here for brevity
#for (i in 1:nrow(diabetes_glucose)) {

for (i in 1:10) {
  bp <- diabetes_glucose$BloodPressure[i]

  if (bp > 100){
    print('High blood pressure')
  } else if (bp < 50) {
    print('Low blood pressure')
  } else {
    print('Normal blood pressure')
  } 
}
```

6. Loop over all rows of diabetes_glucose and determine the risk based on genetic risk score and BMI, with the same conditions as in 2. Print the genetic risk score and BMI as well as the risk level to make it easier to see whether your code works correctly.

::: {.callout-tip collapse="true"}
## Hint

An easy way to printing several variables is to pass a vector into print: `print(c(this,and_that,and_this_too))`

:::

```{r}
#We'll only show the first 10 rows here for brevity
#for (i in 1:nrow(diabetes_glucose)) {

for (i in 1:10) {
  Smoker <- diabetes_glucose$Smoker[i]
  BMI <- diabetes_glucose$BMI[i]
  
  #skip rows where either of the values is NA
  if (is.na(Smoker) | is.na(BMI)){
    next
  }
    
  if (Smoker == 'Smoker' & BMI > 35){
    print(c(Smoker, BMI, 'High risk'))
  } else if (Smoker == 'Smoker' | BMI > 35) {
    print(c(Smoker, BMI,'Moderate risk'))
  } else {
    print(c(Smoker, BMI,'Low risk'))
  }
}

```

## User defined Functions

In this part we will write some functions that create plots. 

Since we want to be able to pass the name of the column to plot as a variable we will need to use the syntax for aliased column names. We showed how to do that in the end of presentation 3 if you need a refresher.  


7. Create a variable `plot_column` and assign "Age" to it. Now make a boxplot of that column. Switch `plot_column` to a different column in `diabetes_glucose`. Does it work?

```{r}
#the column we want to plot
plot_column <- 'Age'

#make the plot
ggplot(diabetes_glucose, aes(y = .data[[plot_column]])) +
  geom_boxplot()

```
8. Wrap your code for the boxplot into a function. The function should take two arguments: the dataframe to use and the name of the column to plot. Test your function. Add some customization to the plot like a theme or colors. 

::: {.callout-tip collapse="true"}
## Hint

Functions are good at returning objects so make your plot into an object and return that.

:::


```{r}
make_boxplot <- function(df, plot_column){
  
  p <- ggplot(df, aes(y = .data[[plot_column]])) +
    geom_boxplot(fill = "#03579A") +
    labs(title = paste("Boxplot of", plot_column)) + 
    theme_bw()
  
  return(p)
  
}

make_boxplot(diabetes_glucose, 'Age')

```

9. Add a check to your function whether the supplied column is numeric. Note here that you need to test the data type of the column you want to plot, not the data type of it's name. Confirm that your check works.


```{r error=TRUE}
make_boxplot <- function(df, plot_column){
  
  if (!is.numeric(df[[plot_column]])){
    stop('The column to plot must be numcerial.')
  }
  
  p <- ggplot(df, aes(y = .data[[plot_column]])) +
    geom_boxplot(fill = "#03579A") +
    labs(title = paste("Boxplot of", plot_column)) + 
    theme_bw()
  
  return(p)
  
}

make_boxplot(diabetes_glucose, 'Sex')

```


10. Write code to apply your boxplot function to each numerical column in the dataframe. There are different ways to achieve this.

```{r}
# Our Idea: Find names of all numeric columns and plug them into a for loop

num_cols <- diabetes_glucose %>%
  select(where(is.numeric)) %>%
  colnames()

#check if correct columns found
num_cols

#iterate over numeric columns and display plots
for(col in num_cols){
  my_plot <- make_boxplot(diabetes_glucose, col)
  print(my_plot)
  #alternative: if you want to extport the plots to files use something like:
  #ggsave(paste0('../figures/boxplot_diabetes_',col,'.png'), width = 7, height = 5)
}

```


11. Create an R script file to contain your functions. Copy your functions there and remove them from your global environment with `rm(list="name_of_your_function")`. Now source the function R script in your quarto document and test that the functions work. 

```{r}
#remove function from global environment so we can test if it loads properly from the script
rm(list = "make_boxplot")
```

```{r}
source('solution4_functions.R')
```

```{r}
make_boxplot(diabetes_glucose, 'Age')
```


-------------------------------

## Extra exercises

First, unnest diabetes_glucose so you get back the Measurement and Glucose columns. 

```{r}
diabetes_glucose_unnest <- diabetes_glucose %>%
  unnest(OGTT)
```


e1. Calculate the mean `Glucose (mmol/L)` for each measuring time point (i.e. one value for 0, 60 and 120). Now stratify this mean by a second variable, Sex. You should have 6 mean values since there are 6 groups (0_female, 0_male, 60_female, ect). Now, create a variable `category` to which you pass the name of the column to stratify by (e.g. `category <- 'Sex'`) and use `category` in your code instead of the literal variable name. 


```{r}
category <- 'Sex'

glucose_group_mean <- diabetes_glucose_unnest %>%
  group_by(Measurement, .data[[category]]) %>%
  summarize(glucose_mean = mean(`Glucose (mmol/L)`), .groups = "drop")

glucose_group_mean
```

e2. We would like to make a plot that shows the means you calculated above. Again, use your `category` variable instead of the literal column name. 


```{r}
glucose_group_mean %>%
    ggplot(aes(x = Measurement,
               y = glucose_mean, 
               color = .data[[category]],
               group = .data[[category]])) +
    geom_point() +
    geom_line()
```

e3. Wrap the code from e1 and e2 into a function `show_mean_by_catergory` so that you can call: 
`show_mean_by_catergory(diabetes_glucose_unnest, 'Sex')` and it will make you the plot. Test with different columns. 

```{r}
show_mean_by_catergory <- function(df,category){
  
  glucose_group_mean <- df %>%
    group_by(Measurement, .data[[category]]) %>%
    summarize(glucose_mean = mean(`Glucose (mmol/L)`), .groups = "drop")
  
  p <-glucose_group_mean %>%
    ggplot(aes(x = Measurement,
               y = glucose_mean, 
               color = .data[[category]],
               group = .data[[category]])) +
    geom_point() +
    geom_line()
  
  return(p)
}
```

```{r}
show_mean_by_catergory(diabetes_glucose_unnest, 'Smoker')
```


