---
title: "Presentation 1: Data Cleanup & Summary Statistics"
format: html
project:
 type: website
 output-dir: ../docs
---

In this section we will focus on data cleanup and generating summary statistics. We will mostly use functions from the tidyverse packages. However, in some cases, it can be quicker and simpler to use base R which is a package that is automatically loaded when starting an R session.

## Load Packages

```{r warning=FALSE, message=FALSE}
library(tidyverse)
library(ggforce)
```

## Load Dataset

Here, we load a dataset containing sales data for employees (measured in thousands of DKK) from 2020 to 2023. We use the `readxl::read_excel()` function, which automatically imports the data as a tibble — the default data format used in the tidyverse for easier and more consistent data handling.

```{r}
df <- readxl::read_excel('../data/df_sales_1.xlsx') 
```

```{r}
class(df)
```

## Accessing and Manipulating Data

### Accessing Data

Access the `Age` column:

```{r results="hide"}
# Base R 
df['Age']

# Tidyverse 
df %>% select(Age)
```

### Manipulating Data

Add a column.

```{r results="hide"}
df <- df %>% 
  mutate(mood = "happy")
```

Add a column containing the difference in sales in 2022 and 2022.

```{r}
df <- df %>% 
  mutate(sales_diff = sales_2022 - sales_2020)
```

Remove the `sales_diff` column.

```{r}
# Base R 
# df$sales_diff <- NULL

# Tidyverse 
df <- df %>%
  select(-sales_diff)
```

Adding a column with content based on a condition with `ifelse`.

```{r results="hide"}
df <- df %>% 
  mutate(raise = ifelse(sales_2023 > sales_2022, "yes", "no"))
```

Extension of `ifelse`: `case_when`

```{r results="hide"}
df <- df %>% 
  mutate(group = case_when(Age < 30 & Sex == "Female" ~ "young_female",
                           Age < 30 & Sex == "Male" ~ "young_male",
                           Age >= 30 & Sex == "Female" ~ "mature_female",
                           Age >= 30 & Sex == "Male" ~ "mature_male", 
                           .default = NA))
```

### Subestting Data

Select columns with sales numbers.

```{r results="hide"}
df %>% 
  select(starts_with('sales_'))
```

Filter rows for people older than 25.

```{r results="hide"}
# Base R 
df[df$Age > 25 ,]

# Tidyverse 
df %>% 
  filter(Age > 25)
```

Filter rows for people that are 30 years old or younger and have sales in 2022 over 200.

```{r}
df %>% 
  filter(Age <= 30, sales_2022 > 200)
```

## Joining Dataframes

The `df_location` data frame contains information about the cities of the sales people.

```{r}
set.seed(101)

df_location <- data.frame(
  ID = c(1, 2, 3, 4, 5, 11, 12, 13, 14, 15),
  City = c("New York", "LA", "New York", "Chicago", "Miami", "Miami", "LA", "Chicago", "LA", "New York")
)

head(df_location)
```

Join `df` and `df_location` with `full_join`, `left_join` and `rigth_join`.

`full_join` keeps all observations in both data sets.

```{r}
df %>% 
  full_join(df_location, by = 'ID')
```

`left_join` keeps all observations in `df`.

```{r}
df %>% 
  left_join(df_location, by = 'ID')
```

`left_join` keeps all observations in `df_loction`.

```{r}
df %>% 
  right_join(df_location, by = 'ID')
```

We are going to use the left joined dataframe.

```{r}
df_join <- df %>% 
  left_join(df_location, by = 'ID')
```

## Investigating Data

Check which columns have NAs.

```{r}
# Base R
colSums(is.na(df_join))

# Tidyverse
df_join %>% summarise(across(everything(), ~ sum(is.na(.))))
```

Remove rows with any NAs.

```{r}
df_join %>% drop_na()
```

Sort data based on sales in 2022 in descending order.

```{r}
df_join %>% arrange(desc(sales_2022))
```

Check variable type:

```{r}
str(df_join)
```

You also see variable types displayed under the column name in tibbles:

```{r}
head(df_join)
```

Counting the number of occurrences for each level of a categorical variable.

```{r results="hide"}
# Base R
table(df_join$City)

# Tidyverse
df_join %>% dplyr::count(City)
```

Checking the range of a variable.

```{r}
# Base R
range(df_join$Age, na.rm = TRUE)

# Tidyverse 
df_join %>%
  summarise(min_value = min(Age, na.rm = TRUE), 
            max_value = max(Age, na.rm = TRUE))
```

### Plotting distributions

For continuous variables we may want to see how they are distributed:

```{r}
#base R

#no native violin plots, but you could use the vioplot package

hist(df_join$Age)
```

```{r}
#tidyverse: 

ggplot(df_join, aes(x=1,y=Age)) +
  geom_violin()
  #if you want to add dots for the actual data points
  #geom_sina()

ggplot(df_join, aes(x=Age)) +
  geom_histogram(bins = 5)

```

Before the next section - let's do a quick break!

------------------------------------------------------------------------

## String manipulation

We will do string manipulation the tidyverse way: using the `stringr` package where all the functions starts with `str_`. 

The `paste` function concatenates two strings to one. This one is from baseR though. 

```{r}
paste('Alice', 'Hansen', sep = ' ')
```

Let's give all the employees the last name *Hansen*.

```{r}
df_join <- df_join %>% 
  mutate(Name = paste(Name, 'Hansen', sep = ' '))

head(df_join)
```

We can use the `str_split_i` function to split a string on a given character and access the i'th element. 

```{r}
str_split_i('Alice Hansen', pattern = ' ', i = 1)
```

```{r}
str_split_i('Alice_Hansen_Jensen', pattern = '_', i = 2)
```

Let's remove the last name we just gave the employees.

```{r}
df_join <- df_join %>% 
  mutate(Name = str_split_i(Name, pattern = ' ', i = 1))

head(df_join)
```

Detect substring in main string using `str_detect`.

```{r}
str_detect('Alice', 'A')
```

```{r}
str_detect('Alice', 'B')
```

Add column that check if "A" or "a" in `Name` and place it after the `Name` column.

```{r}
df_join %>% 
  mutate(A_in_name = str_detect(Name, 'A|a'),
         .after = Name) %>% 
  head()
```

Replace substring in string

```{r}
str_replace_all('Hansen', 'n', 'N')
```

Add column that check if "A" or "a" in `Name` and place it after the `Name` column.

```{r}
df_join %>% 
  mutate(NamE = str_replace_all(Name, 'e', 'E'),
         .after = Name) %>% 
  head()
```

### Whitespace

Whitespace includes spaces, newlines, and other blank characters in text. It can cause errors or inconsistencies in data, so removing unnecessary whitespace is an important step in cleaning data.

Let's have a look at a version of the sales data frame with whitespaces. In the tibble format it cannot be spotted.

```{r message=FALSE}
df_sales_messy <- read_delim('../data/df_sales_messy.csv')
head(df_sales_messy)
```

Accessing the unique sexes of the `Sex` column before cleaning.

```{r}
df_sales_messy$Sex %>% 
  unique()
```

Use the `str_trim` function to remove whitespace.

```{r}
df_sales_messy$Sex %>% 
  str_trim() %>% 
  unique()
```

Like other function, the `str_trim` function can also be used inside the `mutate` function to alter the data frame.

```{r}
df_sales_clean <- df_sales_messy %>% 
  mutate(Sex = str_trim(Sex))
```

Accessing the unique sexes of the `Sex` column after cleaning.

```{r}
df_sales_clean$Sex %>% 
  unique()
```

### Regex: Regular expression 
Regular expressions (regex) are a special language used to search for patterns in text in a very flexible and slightly confusing way.

Instead of looking for an exact word like "cat", regex lets you search for things like:

-   "Any word that starts with ‘c’ and ends with ‘t’"

-   "Any sequence of digits"

-   "A phone number"

-   "A word that may or may not have a certain letter"

It might look a little weird at first (lots of slashes, dots, and symbols), but once you learn a few basics, it’s incredibly powerful. And the good thing is that ChatCPT is very good at it!

#### Use cases for regex

`grep` returns value or index of value that match pattern in list.

```{r}
df_join$raise
```

```{r}
grep(pattern = 'yes', x = df_tidyverse_join$raise) # Returns indexes of values that match

grep(pattern = 'yes', x = df_tidyverse_join$raise, value = TRUE) # Returns values that match

grep(pattern = 'y', x = df_tidyverse_join$raise, value = TRUE) # can handle sub strings 

grep(pattern = 'maybe', x = df_tidyverse_join$raise) 
```

`grepl` returns logical vector indicating which elements match the pattern in list.

```{r}
grepl(pattern = 'yes', df_tidyverse_join$raise)

grepl(pattern = 'y', df_tidyverse_join$raise)

grepl(pattern = 'maybe', df_tidyverse_join$raise) 
```

`gsub`

```{r}
gsub(pattern = "yes", replacement = "YES", x = df_tidyverse_join$raise)
```

## Slices

Look at list

```{r}
df_tidyverse_join$Name
```

Access first element in list

```{r}
df_tidyverse_join$Name[1]
```

Access first to fithed element in list

```{r}
df_tidyverse_join$Name[1:5]
```

Access second to fithed element in list

```{r}
df_tidyverse_join$Name[2:5]
```

## Export Dataset

Export tidyverse dataset

```{r}
writexl::write_xlsx(df_tidyverse_join, '../out/sales_data_2.xlsx')
```
