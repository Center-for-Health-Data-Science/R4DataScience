---
title: "Presentation 1: Data Cleaning"
format: html
project:
 type: website
 output-dir: ../docs
---

In this section, we'll focus on cleaning a dataset. We'll primarily use functions from the `tidyverse` package, but in some cases base R offers quick and effective alternatives.

## Load Packages

```{r warning=FALSE, message=FALSE}
library(tidyverse)
library(ggforce) # extension of ggplot2
# unload MASS since it has select function we don't want to use. 
```

## Load data

We’ll work with two datasets:

-   `df_ov`: clinical information for ovarian cancer patients.

-   `df_exp`: gene expression data for collagen genes.

We use the `load()` function, which automatically imports an R object - let's have a look at it.

```{r warning=FALSE, message=FALSE}
# .RData can contain several objects 
load("../data/Ovarian_data_Col.RData")

class(df_ov)
dim(df_ov)
df_ov %>% head() 

class(df_exp)
dim(df_exp)
df_exp %>% head()
```

### Basics

We can get a little reminder of base R and tidyverse functions and explore some basic data characteristics.

Take a look at categorical and numerical variables, access elements in list.

```{r}
# output: vector
df_ov$vital_status %>% 
  head()

# output: one-column-tibble 
df_ov %>%
  select(vital_status) %>% 
  head()
```

Get a vector the tidyverse way:

```{r}
df_ov %>%
  select(vital_status) %>% 
  pull() %>% 
  head()
```

### Check for Missing Values

Check which columns contain NA values and how many:

```{r}
df_ov %>% 
  is.na() %>% 
  colSums() %>% 
  barplot(las=2, cex.names=0.6) # baseR barplot since we are plotting a vector
```

Remove rows with missing data (careful - this can reduce sample size too much):

```{r}
df_ov %>% 
  drop_na()
```

## Data wrangling and cleaning

**Let's do some cleanup**

1.  Drop Non-Informative Variables

2.  Drop Variables with Too Many Missing Values

3.  Standardize Categorical Data

4.  Fix Variable Types

5.  Recode and Reorder Factors

6.  Create New Variables from existing ones

### Step 1: Drop Non-Informative Variables

Let’s check a few categorical variables and remove any that are redundant or irrelevant. If they don’t provide useful or well-curated information, we can drop them:

```{r}
df_ov$histological_type %>% table()
```

```{r, warning=FALSE}
df_ov <- df_ov %>% 
  select(!histological_type)
```

### Step 2: Drop Variables with Too Many Missing Values

If a variable has more than \~20% missing data, it probably won’t be useful. Let’s remove those:

`~ mean(is.na(.)) < threshold` explained: `~` = “Define a function” `.` is a placeholder for the input (in this case, a column of the data frame) `mean(is.na(.))` calculates the proportion of missing values `< threshold` returns TRUE or FALSE — which `where()` uses to decide if a column should be kept

```{r}
threshold <- 0.2 # 20% threshold

df_ov <- df_ov %>% 
  select(where(~mean(is.na(.)) < threshold))

dim(df_ov)
```

This keeps only the variables that are mostly complete.

### Step 3: Standardize Categorical Variables

Counting the number of occurrences for each level of a categorical variable.

Here we count how many dead or alive individuals we have. This is useful for checking balance across groups or categories.

```{r}
df_ov %>% 
  select(vital_status) %>% 
  table(useNA = 'ifany') #%>% barplot()
```

Looks like we have two groups of deceased and living. Let's have a closer look at the unique values of this variable.

```{r}
df_ov$vital_status %>% 
  unique()
```

Whitespace includes spaces, newlines, and other blank characters in text. It can cause errors or inconsistencies in data, so removing unnecessary whitespace is an important step in cleaning data. Sometimes, hidden characters or spaces cause misgrouped levels.

Use the `str_trim()` function to remove whitespace.

```{r}
str_trim(" Hello World!   ")
```

Trim whitespace and standardize:

Like other function, the `str_trim()` function can also be used inside the `mutate()` function to alter the dataframe.

```{r}
df_ov <- df_ov %>% 
  mutate(vital_status = str_trim(vital_status))
```

Accessing the unique values of the `vital_status` column.

```{r}
df_ov$vital_status %>% 
  unique()
```

Change "NA" to actual NA.

```{r}
df_ov <- df_ov %>%
  mutate(vital_status = na_if(vital_status, "NA"))
```

After clean up we only have one group of deceased, living, and NA - perfect!

```{r}
df_ov$vital_status %>% 
  unique()
```


### Step 4: Fix Variable Types

Some variables are stored as **character** or **numeric** when they should actually be **factors** (i.e., categorical variables). Convert character/numeric columns to factors:

```{r}
# One by one...
df_ov$sample_type <- as.factor(df_ov$sample_type)
df_ov$primarysite <- as.factor(df_ov$primarysite)

# In one go:
cols_to_factor <- c('sample_type', 'primarysite', 'summarygrade',
                    'recurrence_status', 'vital_status', 
                    'tumorstage', 'grade', 'batch')

df_ov <- df_ov %>%
  mutate(across(.cols = cols_to_factor, 
                .fns = as.factor))

str(df_ov)
```

### Step 5: Re-code and Reorder Factors

Sometimes we want to **set the order of factor levels manually**, especially if there's a natural or meaningful order (e.g., "low" → "high"): This helps when plotting or interpreting regression coefficients.

```{r}
# Recode factor 
df_ov$summarygrade %>% table()

df_ov <- df_ov %>% 
  mutate(summarygrade = fct_recode(summarygrade, "high" = "HIGH"),
         summarygrade = fct_recode(summarygrade, "low" = "LOW"))

df_ov$summarygrade %>% table()

# Reorder levels 
levels(df_ov$summarygrade) # high, low

df_ov$summarygrade <- factor(df_ov$summarygrade, levels = c('low', 'high'))

levels(df_ov$summarygrade) # low, high
```

### Step 6: Creating New Variables

Now, we would like to create a new data column by extracting specific information or combining other columns.

Add a column combining other columns into one:

```{r}
df_ov <- df_ov %>% 
  mutate(percent_not_cancer_cells = percent_stromal_cells + percent_normal_cells)
```

For character vectors you can use functions `paste` and `paste0` . The `paste` function concatenates two strings into one. This one is from baseR.

```{r}
paste('TCGA', 'Data', sep = ' ')
```

```{r}
df_ov <- df_ov %>% 
  mutate(stage = paste(tumorstage, substage, sep = '-'))

unique(df_ov$stage)
```

Create logical variables with `ifelse`. Adding a column with content based on a condition with `ifelse`.

```{r results="show"}
df_ov <- df_ov %>% 
  mutate(dominant_cell_type = ifelse(percent_not_cancer_cells > percent_tumor_cells, "not_cancer_cells", "cancer_cells"))

table(df_ov$dominant_cell_type)
```

Extension of `ifelse`: `case_when`

```{r results="show"}
df_ov <- df_ov %>% 
  mutate(group = case_when(age_at_initial_path_diagn < 60 & summarygrade == "low" ~ "Low grade - Young",
                           age_at_initial_path_diagn < 60 & summarygrade == "high" ~ "High grade - Young",
                           age_at_initial_path_diagn >= 60 & summarygrade == "low" ~ "Low grade - Mature",
                           age_at_initial_path_diagn >= 60 & summarygrade == "high" ~ "High grade - Mature",
                           .default = NA))

table(df_ov$group)
```

## String manipulation

Sometimes the information you need is hidden inside longer text strings or encoded in specific patterns — especially in genomics or clinical datasets. In this example we notice that sample type information is unknown for a lot of patients. Since we are TCGA experts, we know that this information is actually encoded in the full sample name `TCGA-20-0987-01A-02R-0434-01`. But How do we get it out.

To extract and work with this kind of information, we can use what is called a **Regular Expression (Regex)** and **string manipulation** tools.

### Regex: Regular expression

Regular expressions (regex) are used to **search for patterns in text strings**. Regular expressions are super flexible and very powerful, BUT they can be slightly confusing at times...

Instead of looking for an exact word like *cat*, a regex lets you search for things like:

-   "Any word that starts with ‘c’ and ends with ‘t’"

-   "Any sequence of digits"

-   "A word that may or may not have a certain letter"

-   "A word containing a specific delimiter, e.g. a dash, as comma, etc."

It might look a little weird (lots of slashes, dots, and symbols), but once you learn a few basics, it’s incredibly useful! And the good thing is that ChatCPT is very good at making regular expressions for you!

![](../figures/regex1.png){fig-align="center"}

We will do string manipulation the tidyverse way: using the `stringr` package where all the functions starts with `str_`. These functions often has a parameter called `pattern` which can take a regular expression as an argument. Let's start with some simple examples.

### Examples

```{r}
df_ov$alt_sample_name %>% head(n = 1)
```

Let’s say we want to extract part of the sample name. We can use the `str_split_i` function to split a string on a given character and access the i'th element.

```{r}
str_split_i('TCGA-20-0987-01A-02R-0434-01', pattern = '-', i = 2)
```

This grabs the 4th segment in the name string, which might contain the sample code We can apply this to a whole column using `mutate()` and create a new variable with the extracted values.

```{r}
df_ov <- df_ov %>% 
  mutate(sample_code = str_split_i(alt_sample_name, pattern = '-', i = 4))

table(df_ov$sample_code)
```

We know that **01** encodes **primary tumor** while **11** encodes healthy tissue. We can use `str_detect()` to see if a sub-string contains the **01** or **11**.

```{r}
str_detect(df_ov$sample_code, '01') %>% table(useNA = 'ifany')
```

```{r}
str_detect(df_ov$sample_code, '11') %>% table(useNA = 'ifany')
```

Add a column that records TRUE if sample is a primary tumor and place it after the `Sample_type` column.

`'01.{0,1}'` explained:

`01` — matches the characters '0' followed immediately by '1'.

`.` — matches any single character (A, B, C, X, !, except a newline by default).

`{0,1}` — is a quantifier, meaning: match the preceding element (the dot `.`) zero or one time.

```{r}
df_ov <- df_ov %>% 
  mutate(sample_code_manual = str_detect(sample_code, '01.{0,1}'), 
         .after = sample_type)

df_ov %>% select(sample_code, sample_code_manual) %>% slice(100:110)
```

We can also replace text patterns:

```{r}
str_replace_all(string = 'TCGA', pattern = 'A', replacement = 'aaaaaaaaaa')
```

```{r}
df_ov <- df_ov %>% 
  mutate(sample_recode = str_replace_all(sample_code, '01.', 'Tumor'),
         sample_recode = str_replace_all(sample_recode, '11A', 'Healthy'),
         .after = sample_type)

df_ov %>% select(alt_sample_name, sample_code, sample_code_manual, sample_recode) %>% tail()

df_ov <- df_ov %>% 
  select(!c(sample_code_manual, sample_code, alt_sample_name, sample_type))

df_ov %>% dim()
```

Nicely done!

**At this point, we have:**

1.  Dropped Non-Informative Variables

2.  Dropped Variables with Too Many Missing Values

3.  Standardized Categorical Data

4.  Fixed Variable Types

5.  Recoded and Reordered Factors

6.  Created New Variables from existing ones

## Joining Dataframes

Often we have information stored in more than one table, and we want to merge these data together into a single dataset. For example, here we would like to join our `df_ov` and `df_exp` data table by IDs.

Let's make a subset of each of the datasets to have a better overview of what is going on.

```{r}
df_exp_subset <- df_exp %>% arrange(unique_patient_ID) %>% slice(1:5) %>% select(1:5)
df_ov_subset <- df_ov %>% arrange(unique_patient_ID) %>% slice(3:7) %>% select(1:3, vital_status)

df_exp_subset$unique_patient_ID %in% df_ov_subset$unique_patient_ID %>% table()
```

A quick recap of join types from `dplyr`:

-   `full_join()`: all rows from both

-   `inner_join()`: only matched rows

-   `left_join()`: all from left, matched from right

-   `right_join()`: all from right, matched from left

#### Full Join

A **full join** keeps *everything* — all rows from both `df_ov_subset` and `df_exp_subset`. If there's no match, missing values (`NA`) are filled in.

```{r}
df_ov_subset %>% 
  full_join(df_exp_subset, by = "unique_patient_ID")

# N row:
# union(df_exp_subset$unique_patient_ID, df_ov_subset$unique_patient_ID) %>% length()
```

#### Inner Join

An **inner join** keeps only the rows that appear in **both** data frames. So if an ID exists in one but not the other, it’s dropped.

```{r}
df_ov_subset %>% 
  inner_join(df_exp_subset, by = "unique_patient_ID")

# N row:
# intersect(df_exp_subset$unique_patient_ID, df_ov_subset$unique_patient_ID) %>% length()
```

#### Left Join

A **left join** keeps **all rows from** `df_ov_subset`, and matches info from `df_exp_subset` wherever possible. Unmatched rows from `df_ov_subset` get `NA` for the new columns.

```{r}
df_ov_subset %>% 
  left_join(df_exp_subset, by = "unique_patient_ID")

# N row:
# df_ov_subset$unique_patient_ID %>% length()
```

#### Right Join

A **right join** is the opposite: it keeps **all rows from** `df_ov_subset` and adds matching data from `df_exp_subset` wherever it can.

```{r}
df_ov_subset %>% 
  right_join(df_exp_subset, by = "unique_patient_ID")

# N row:
# df_exp_subset$unique_patient_ID %>% length()
```

### Let's join our datasets

We will join the two full datasets.

```{r}
df_comb <- df_ov %>% 
  left_join(df_exp, by = "unique_patient_ID")
```

### Recap

**By now, we have:**

-   Loaded and explored clinical and expression datasets

-   Cleaned whitespace, fixed types, dropped unnecessary variables

-   Created new columns through logic and string operations

-   Merged the clinical and expression data for downstream analysis

-   Your data is now prepped and ready for modeling, visualization, or more advanced statistical analysis.

**Your dataset `df_comb` is now ready for summary statistics and exploratory data analysis (EDA).**

```{r}
# save(df_comb, file="../data/Ovarian_comb_clean.RData")
```
