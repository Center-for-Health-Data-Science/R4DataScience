---
title: "Presentation 3 - Exploratory Data Analysis (EDA)"
format: html
project:
 type: website
 output-dir: ../docs
---

In exercises 3A and B you will a deeper look at the diabetes data. To prepare for that, we will learn some extra ggplot tricks!

## Load packages

```{r warning=FALSE, message=FALSE}
library(readxl)
library(tidyverse)
```

## Load data

```{r}
df_sales <- read_excel('../out/sales_data_2.xlsx')
df_sales
```

## ggplot recap

We will not go into much detail here since this section mostly serves as a recap of the [ggplot material](https://center-for-health-data-science.github.io/FromExceltoR/Presentations/presentation3.html) covered in the previous course, From Excel to R.

The creed of `ggplot` is summarized is that every information that should be put into the plot must be in a column. There is one column that describes the x-axis, one for the y-axis, and one for each additional aesthetic like color, size, shape, ect.

```{r}
ggplot(df_sales, aes(x = Name, y = sales_2022, color = Sex)) +
  geom_point()
  
```

### The long format is ggplot's best friend

It follows that if I need to plot all sales data, I will need to change the dataframe's format such that all data points referring to sales are in the same column. As shown in presentation 2 we do that with `pivot_longer`:

```{r}
sales_long <- df_sales %>%
  pivot_longer(cols = starts_with("sales_"),
               names_to = "sales_year",
               values_to = "sales_value")
sales_long
```

```{r}
ggplot(sales_long, aes(x = Name, y = sales_value, color = Sex)) +
  geom_point()
```

### You can pipe into ggplot

You know what sucks? Having 10 million dataframes with very similar names in your environment. If you you don't need to use your long format dataframe for anything else, instead of saving it and then plugging it into ggplot, you can pipe directly into ggplot:

```{r}
df_sales %>%
  pivot_longer(cols = starts_with("sales_"),
               names_to = "sales_year",
               values_to = "sales_value") %>%
  # we omit the dataframe to plot because that is being piped into ggplot
  # remember that different ggplot layers are still combined with '+'
  ggplot(aes(x = Name, y = sales_value, color = Sex)) +
  geom_point()
```

### Plotting several dataframes

Sometimes we would like to add more information to a plot. Consider the one we just made above. It shows 3 or 4 dots for each amployee, which the 3 or 4 different years we have information for. I can now calculate a mean across the 4 years per employee:

```{r}
sales_mean <- sales_long %>%
  group_by(Name) %>%
  summarise(mean = mean(sales_value, na.rm = TRUE))

sales_mean
```

And I would like to add it to the plot:

```{r}

#copy pasta code above
df_sales %>%
  pivot_longer(cols = starts_with("sales_"),
               names_to = "sales_year",
               values_to = "sales_value") %>%
  # we omit the dataframe to plot because that is being piped into ggplot
  # remember that different plot layers are still combined with '+'
  ggplot(aes(x = Name, y = sales_value, color = Sex)) +
  geom_point() +
  # add mean data by switching the dataframe!
  # I need to specify a color aesthetic because there is no Sex column in sales_mean
  geom_point(data = sales_mean, aes(x = Name, y = mean), color = 'black')

```

### Plots are objects

ggplot plots are objects like any other R object and they can therefore be stored in a variable and displayed by invoking the variable's name:

```{r}
awesome_plot <- df_sales %>%
  pivot_longer(cols = starts_with("sales_"),
               names_to = "sales_year",
               values_to = "sales_value") %>%
  #we omit the dataframe to plot because that is being piped into ggplot
  #remember that different plot layers are still combined with '+'
  ggplot(aes(x = Name, y = sales_value, color = Sex)) +
  geom_point() +
  #add mean data by switching the dataframe!
  #I need to specify a color aesthetic because there is no Sex column in sales_mean
  geom_point(data = sales_mean, aes(x = Name, y = mean), color = 'black')

awesome_plot

```

If R is every being pesky about showing you plots (e.g. if you want to display them in a loop) wrapping `print()` around the plot name usually helps:

```{r}
print(awesome_plot)
```

### Aliasing column names

Lastly, we're going to show you how to alias a column name. Have you noticed that we always need to specify the literal name of the column we want to plot? What if we want to give the column name in a variable?

```{r}
plot_this <- 'Name'

ggplot(df_sales, aes(x = plot_this, y = sales_2022, color = Sex)) +
  geom_point()

```

Certainly not the expected outcome! We can see that ggplot didn't evaluate `plot_this` to the name of the actual column, `Name`. We'll have to do it this way:

```{r}
plot_this <- 'Name'

ggplot(df_sales, aes(x = .data[[plot_this]], y = sales_2022, color = Sex)) +
  geom_point()
```

We hear you say 'But that is cumbersome!'. Unfortunately we're neither the developers nor maintainers of `ggplot` so we all suffer together.

Another solution is `aes_string`:
```{r}
plot_this <- 'Name'

ggplot(df_sales, aes_string(x = plot_this, y = 'sales_2022', color = 'Sex')) +
  geom_point()
```