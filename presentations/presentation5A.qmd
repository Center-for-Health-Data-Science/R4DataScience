---
title: "Presentation 5A: Intro to Regression in R"
format: html
project:
 type: website
 output-dir: ../docs
---

In this section we'll look at how to define and fit regression models in R.

## Load packages

```{r warning=FALSE, message=FALSE}
library(tidyverse)
library(caret)
library(readxl)
```

## Load data

In order to focus on the technical aspects we'll use a simple toy dataset. It contains the number of cigarettes smoked per day and how long the person lived. It is inspired by [this paper](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2598467/) if you want to take a look.

```{r}
df_smoke <- read_csv('../data/smoking_cat.csv')
df_smoke
```

We have daily cigarettes smoked (number) and life (in years). Both of these are numeric variables. We also have a variable named exercise, it seems that this variable might in fact be an ordinal factor variable. Exercise is encoded as a numeric variable, so the first thing we will do is to convert it to a factor.

```{r}
df_smoke %>% distinct(exercise)

df_smoke <- df_smoke %>% 
  mutate(exercise = as.factor(exercise))
```

## Linear Regression

We will perform a linear regression using daily cigarettes smoked and exercise level as predictors, $X$, and lived years as the outcome, $y$.

![](../figures/lin_reg.jpg){fig-align="center"}

### Split Data into Training and Test Set

Now, we will split our data into a test and a training set. There are numerous ways to do this. We here show `sample_frac` from `dplyr`:

```{r}
# Set seed to ensure reproducibility
set.seed(123)  

# add an ID column to keep track of observations
df_smoke$ID <- 1:nrow(df_smoke)

train <- df_smoke %>% 
  sample_frac(0.75)
nrow(train)
head(train)
```

As you can see, the ID's in `train` are shuffled and it only has 75 rows since we asked for 75% of the data. Now all we have to do is identify the other 25%, i.e. the observations not in train.

```{r}
#from df_smoke remove what is in train by checking the ID column
test  <- df_smoke %>% 
  filter(!ID %in% train$ID) 

# OR

test  <- anti_join(df_smoke, train, by = 'ID') 

nrow(test)
head(test)
```

### Defining the model

As stated above, a linear regression model generally has the form of:

$$y = β_0 + β_1 * x_i$$

Where we refer to $β_0$ as the intercept and $β_1$ as the coefficient. There will typically be one coefficient for each predictor. The goal of modelling is to estimate the values of $β_0$ and all $β_i$.

We need to tell R which of our variables is the outcome, $y$, and which predictors, $x_i$, we want to include in the model. This is referred to in documentation as the model's **formula**. Have a look:

```{r eval=FALSE}
#the formula is written like so:
lm(y ~ x_1 + x_2 + ...)
#see the help
?lm
```

In our case, $y$ is the number of years lived and we have a two predictors $x_1$ (numeric), the number of cigarettes smoked per day, and $x_2$ (ordinal factor), exercise level (0, 1 or 2). So that will be our model formulation:

```{r}
#remember to select the training data subset we defined above! 
model <- lm(life ~ daily_cigarettes + exercise, data = train)
```

### Modelling results

By calling `lm` we have already trained our model! The return of `lm()` is, just like the return of `prcomp()`, a named list.

```{r}
class(model)
names(model)
```

Let's have a look at the results. The summary gives us a lot of information about the model we trained:

```{r}
# View model summary
summary(model)
```

The **Residuals** section summarizes the distribution of the residuals, which is the difference between the actual observed $y$ values and the fitted $y$ values.

The **Coefficients** table shows the estimated values for each coefficient including the intercept, along with their standard errors, t-values, and p-values. These help to determine the significance of each predictor.

In the bottom section we have some information about how well the model fits the training data.

The **Residual Standard Error (RSE)** is the standard deviation of the residuals (prediction errors). It tells you, **on average, how far the observed values deviate from the regression line**.

The **R-squared** value indicates the proportion of variance explained by the model, with the Adjusted R-squared accounting for the number of predictors.

Finally, the **F-statistic** and its p-value tests whether the model as a whole explains a significant portion of the variance in the response variable (the outcome, $y$).

We can extract the `model` object's components with `$`:

```{r}
model$coefficients
```

Lets plot the results:

```{r}
par(mfrow=c(2,2))
plot(model)
```

### Model interpretation

Plot to understand the model:

```{r}
train$predicted_life <- predict(model, newdata = train)

ggplot(train) + 
  geom_point(aes(x = daily_cigarettes, 
                 y = life, 
                 color = exercise)) + 
  geom_line(aes(x = daily_cigarettes, 
                 y = predicted_life, 
                 color = exercise)) + 
  labs(title = "Predicted Life by Smoking & Exercise", 
       x = "Daily cigarettes", 
       y = "Life", 
       color = "Exercise") + 
  theme_bw()
```

What do these results mean? Our model formulation is:

$$life = β_0 + β_1 * cigarettes + β_2 * exercise$$

And we estimated these values:

```{r}
model$coefficients
```

Therefore:

-   The intercept $β_0$ is the number of years we estimated a person in this dataset will live if they smoke 0 cigarettes and do not exercise. It is 77.6 years.

-   The coefficient of cigarettes per day is -0.29. This means for every 1 unit increase in cigarettes (one additional cigarette per day) the life expectancy decreases by 0.29 years. Similarly for the exercise variable, if you exercise your life expectancy will go up 1.1-2.4 years compared to no exercise, independently of how many cigarettes you smoke.

### Model performance

We now use our held out test data to evaluate the model performance. For that we will predict life expectancy for the 25 observations in `test` and compare with the observed values.

```{r}
#use the fitted model to make predictions for the test data
y_pred <- predict(model, test)
```

Let's see how the predicted values fit with the observed values.

```{r}
pred <- tibble(pred = y_pred, 
               real = test$life)

ggplot(pred, 
       aes(x=real, y=pred)) +
  geom_point()
```

Not too bad! We usually calculate the root mean square error (rmse) between predictions and the true observed values to numerically evaluate regression performance:

```{r}
RMSE(pred$real,pred$pred)
```

Our predictions are on average 0.88 years 'off'.

## Classification

Classification is the method we use when the outcome variable we are interested in is not continuous, but instead consists of two or more classes.

In order to have a categorical outcome, we'll add a column to our toy data that describes whether the person died before age 75 or not.

```{r}
df_smoke <- df_smoke %>%
  mutate(early_death = factor(ifelse(life < 75, 1, 0))) # Encoding: True/yes = 1, False/no = 0

df_smoke %>%
  count(early_death)
```

### Training and Test set with class data

Let's remake our training and test data. This time we have classes that we would like to be in the same ratios in training and test set. We must check this is the case!

```{r}
# Set seed to ensure reproducibility
set.seed(123)  

#add an ID column to keep track of observations
df_smoke$ID <- 1:nrow(df_smoke)

train <- df_smoke %>% 
  sample_frac(0.75)

table(train$early_death)


test  <- anti_join(df_smoke, train, by = 'ID') 

table(test$early_death)

```

Luckily for us the division of the outcome variable classes between the train and test set is almost perfect. However, there may be cases where randomly splitting will not give you a balanced distribution. This is likely to happen if one class is much larger than the other(s). In these cases you should split your data in a non-random way, specifically ensuring a balanced train and test set.

Now let's perform logistic regression to see whether there is an influence of the number of cigarettes and amount of exercise on the odds of the person dying before 75.

Logistic regression belongs to the family of generalized linear models. They all look like this:

$$ y \sim \beta * X $$

with:

-   $y$ the outcome
-   $\beta$ the coefficient matrix
-   $X$ the matrix of predictors
-   $\sim$ the link function

In a logistic regression model the link function is the logit. In a linear model the link function is the identity function (so \~ becomes =).

### Logistic regression: Math

In order to understand what that means we'll need a tiny bit of math.

Our $y$ is either 0 or 1. However we cannot model that, so instead we will model the probability of the outcome being 1: $P(earlydeath == 1)$. Except probabilities are bounded between 0 and 1 which is mathematically difficult to impose (it means all $y's$ have to be between these two values and how are we gonna enforce that?) So instead, we will model the log-odds of early death:

$$ y = \log(\frac{P(earlydeath == 1)}{1-P(earlydeath == 1)})$$

It may not look like it but we promise you this $y$ is a well behaved number because it can be anywhere between - infinity and + infinity. So therefore our actual model is:

$$ \log(\frac{P(earlydeath == 1)}{1-P(earlydeath == 1)} = \beta * X$$

And if we want to know what this means for the probability of dying early, we just take invert the link function:

$$ P(earlydeath == 1) = \frac{1}{1+ e^{(-y)}} $$

Which serves as the `link` between what we're actually interested in (the probability of a person dying early) and what we're modelling using logit. End of math.

### Model formulation in R

So in order to fit a logistic regression we will use the function for generalized linear models, `glm`. We will specify that we want logistic regression (using the logit as the link) by setting `family = binomial`:

```{r}
model_log <- glm(early_death ~ daily_cigarettes + exercise, data = train, family = "binomial")
summary(model_log)
```

### Model interpretation

We see from looking at the summary that the coefficient of exercise level 1 and level 2 is not significant. This means that we are not confident that doing any level of exercise has a significant impact on the probability of dying before 75 compared to doing no exercise. This does not mean that there can be no influence, merely that we do not have enough data to detect it if it is there.

Are you surprised? Exercise level was significant when we modelled the number of years lived with linear regressions.

With the number of daily cigarettes predictor we have a high degree of certainty that it influences the probability of dying before 75 (in this dataset!), but what does a coefficient of 0.84 mean?

We know that:

$$ P(earlydeath == 1) = \frac{1}{1+ e^{(-y)}} $$

and (leaving out the exercise level since it's not significant):

$$ y = \beta_0 + \beta_1 * cigs $$

So how does $y$ change as $0.84 * cigs$ becomes larger? Let's agree that $y$ becomes larger. What does that mean for the probability of dying before 75? Is $e^{(-y)}$ a large number if $y$ is large? Luckily we have a calculator handy:

```{r}
#exp(b) is e^b in R

exp(-1)

exp(-10)

exp(-100)
```

We see that $e^{(-y)}$ becomes increasingly smaller with larger $y$ which means that:

$$ P(earlydeath == 1) = \frac{1}{1+ small} \sim \frac{1}{1} $$

So the larger $y$ the smaller $e^{(-y)}$ and the closer we get to $P(earlydeath == 1)$ being 1. That was a lot of math for: If the coefficient is positive you increase the likelihood of getting the outcome, i.e. dying before 75.

### Model comparison

Now we know how to fit linear models and interpret the results. But often there are several predictors we could include or not include, so how do we know that one model is better than another?

There are several ways to compare models. One is the likelihood ratio test which tests whether adding predictors significantly improves model fit by comparing the log-likelihoods of the two models. Another much used comparison is to look at the AIC (Akaike Information Criterion) or BIC (Bayesian Information Criterion). Lower AIC/BIC values generally indicate a better trade-off between model fit and complexity.

For example we made this logistic regression model above:

```{r}
summary(model_log)
```

But `exercise` does not have a significant p-value. Perhaps we would have a better model if we only use `dialy_cigarettes`?

Let's compare them:

```{r}
model_reduced <- glm(early_death ~ daily_cigarettes, data = train, family = "binomial")
summary(model_reduced)
```

We can use an anova with the Chi-square test to compare the log-likelihood of the two models. It is most common to compare the less complex model to the more complex model:

```{r}
anova(model_reduced, model_log, test = 'Chisq')
```

The p-value of the Chi-square test tells us if there is evidence that the difference in log-likelihoods is significant. If it is not significant, we do not have evidence that the more complex model is a better fit than the less complex model and we would therefore choose the less complex model with fewer predictors since that gives us more statistical power and less overfitting.

In this case the p-value is significant which means that the more complex model, that includes exercises, is a better fit. Do you think this makes sense with the exercises levels not being significant predictors when we looked at `summary(model_log)`.

### Model Evaluation

Lastly, let's evaluate our model using the test set, just like we did for the linear regression. First, we will predict the outcome for the test set:

```{r}
y_pred <- predict(model_log, newdata = test, type = 'response')

y_pred 
```

As you see, the predictions we get out are not $yes$ or $no$, they are instead a probability (as discussed above), so, we will convert them to class labels.

```{r}
y_pred <- ifelse(as.numeric(y_pred) >= 0.5, 1, 0) %>% 
  as.factor()

y_pred
```

Now we will compare the predicted class with the observed class for the test set. You can do this in different ways, but here we will use the accuracy.

$$ Accuracy = \frac{(True Positives + True Negatives)}{(True Positives + True Negatives + False Positives + False Negatives)}$$

You can calculate the accuracy yourself, or you can use a function like `confusionMatrix()` from the package `caret` which also provides you with individual metrics like sensitivity (true positive rate, recall) and specificity (true negative rate).

```{r}
caret::confusionMatrix(y_pred, test$early_death)
```

## Clustering

Clustering is a type of unsupervised learning technique used to group similar data points together based on their features. The goal is to find inherent patterns or structures within the data, e.g. to see whether the data points fall into distinct groups with distinct features or not.

### Wine dataset

For this we will use the wine data set as an example:

```{r warning=FALSE, message=FALSE}
library(ContaminatedMixt)
library(factoextra)
```

Let's load in the dataset

```{r}
data('wine') #load dataset
df_wine <- wine %>% as_tibble() #convert to tibble
df_wine
```

This dataset contains 178 wine, each corresponding to one of three different cultivars of wine. It has 13 numerical columns that record different features of the wine.

We will try out a popular method, k-means clustering. It works by initializing K centroids and assigning each data point to the nearest centroid. The algorithm then recalculates the centroids as the mean of the points in each cluster, repeating the process until the clusters stabilize. You can see an illustration of the process below. Its weakness is that we need to define the number of centroids, i.e. clusters, beforehand.

![](../figures/kmeans.jpg){fig-align="center"}

### Running k-means

For k-means it is very important that the data is numeric and scaled so we will do that before running the algorithm.

```{r}
# Set seed to ensure reproducibility
set.seed(123)  

# Pull numeric variables and scale these
kmeans_df <- df_wine %>%
  dplyr::select(where(is.numeric)) %>%
  mutate(across(where(is.numeric), scale)) 

```

Kmeans clustering in R is easy, we simply run the `kmeans()` function:

```{r}
set.seed(123)  

kmeans_res <- kmeans_df %>%
  kmeans(centers = 4, nstart = 25)

kmeans_res

```

We can call `kmeans_res$centers` to inspect the values the centroids:

```{r}
kmeans_res$centers
```

For example the center of cluster 1 is placed at the coordinates -0.79 for Alcohol, 0.04 for Malic Acid, 0.22 for Ash and so on. Since our data has 13 dimensions, i.e. features, the cluster centers also do.

This is not super practical if we would like to visually inspect the clustering since we cannot plot in 13 dimensions. How could we solve this?

### Visualizing k-means results

We would like to see where our wine bottles and their clusters lie in a low-dimensional space. This can easily be done using the `fviz_cluster()`

```{r}
fviz_cluster(object = kmeans_res, 
             data = kmeans_df,
             palette = c("#2E9FDF", "#00AFBB", "#E7B800", "orchid3"), 
             geom = "point",
             ellipse.type = "norm", 
             ggtheme = theme_bw())
```

### Optimal number of clusters

There are several ways to investigate the ideal number of clusters and `fviz_nbclust` from the factoextra package provides three of them:

The so-called elbow method observes how the sum of squared errors (sse) changes as we vary the number of clusters. This is also sometimes referred to as "within sum of square" (wss).

```{r}
kmeans_df %>%
  fviz_nbclust(kmeans, method = "wss")
```

The gap statistic compares the within-cluster variation (how compact the clusters are) for different values of K to the expected variation under a null reference distribution (i.e., random clustering).

```{r}
kmeans_df %>%
  fviz_nbclust(kmeans, method = "gap_stat")
```

Both of these tell us that there should be three clusters and we also know that there are three cultivars of wine in the dataset. Let's redo k-means with three centroids.

```{r}
# Set seed to ensure reproducibility
set.seed(123)  

#run kmeans
kmeans_res <- kmeans_df %>%
  kmeans(centers = 3, nstart = 25)
```

```{r}
#add updated cluster info to the dataframe
fviz_cluster(kmeans_res, data = kmeans_df,
             palette = c("#2E9FDF", "#00AFBB", "#E7B800", "orchid3"), 
             geom = "point",
             ellipse.type = "norm", 
             ggtheme = theme_bw())
```
