---
title: "Presentation 4: Functions - Main Script"
format: html
project:
 type: website
 output-dir: ../docs
---

In this section we will learn more about flow control and how to make more complex code constructs in R.

```{r message=FALSE, warning=FALSE}
library(tidyverse)
```


## If-else statments 

If-else statements are essential if you want your program to do different things depending on a condition. Here we see how to code them in R. 

First define some variables.  

```{r}
num1 <- 8
num2 <- 5
```

Now that we have variables, we can test logical statement between them: Is `num1` larger than `num2`? The result of a logical statement is always one of either `TRUE` or `FALSE`:

```{r}
num1 > num2
```

Is `num1` smaller than `num2`?

```{r}
num1 < num2
```

We use logical statements inside an `if` statement to define a condition.

```{r}
if (num1 > num2){
  statement <- paste(num1, 'is larger than', num2)
}

print(statement)
```

We can add an `else if` to test multiple conditions. `else` is what applies when all previous checks where `FALSE`. 

Now we have three possible outcomes: 


```{r}

#try with different values for num2
num2 <- 10

if (num1 > num2){
  statement <- paste(num1, 'is larger than', num2)
} else if (num1 < num2) {
  statement <- paste(num1, 'is smaller than', num2)
} else {
  statement <- paste(num1, 'is equal to', num2)
} 

print(statement)
```

## For-loops

### Defining a for loop

Many functions in R are already vectorized, i.e. 

```{r}
df <- tibble(num1 = 1:10)
df

df$num2 <- df$num1 * 10
df
```

The above code applies `* 10` to each element of column `num1` without us having to invoke a loop. 

But sometimes we want to iterate over the elements manually because the situation requires it. For that case we can use a `for` loop. 

We first define a list containing both numeric and character elements.

```{r}
list1 <- list(1, 2, 6, 3, 2, 'hello', 'world', 'yes', 7, 8, 12, 15)
```

To loop through `list1`, we define a loop variable (here called `element`), which takes the value of each item in the vector, one at a time.

```{r}
for (element in list1) {
  print(element)
}
```

The loop variable name is arbitrary - you can call it anything. For example, we can use `THIS_VARIABLE` and get the same result. Point is, it does not matter what you call the variable, just avoid overwriting an important variable of your script.

```{r}
for (THIS_VARIABLE in list1) {
  print(THIS_VARIABLE)
}
```

After you loop through a vector or a list, the value of the loop variable is always the last element of your vector. The variable is hence a global variable. 

```{r}
THIS_VARIABLE
```

### Loop control

There are two loop control statements we can use to 

* jump to the next iteration: `next`
* end the loop before finishing: `break`

```{r}
#example for next

for (element in list1) {
  if(element == 'hello'){
    next
  }
  
  print(element)
}
```

```{r}
#example for break
for (element in list1) {
  if(element == 'hello'){
    break
  }
  
  print(element)
}
```


### Which data constructs are iterable in R?

Vectors:

```{r}
my_vector <- c(1, 2, 3, 4, 5)
for (elem in my_vector) {
  print(elem)
}

```

Lists:

```{r}
my_list <- list(a = 1, b = "Hello", c = TRUE)
for (elem in my_list) {
  print(elem)
}

```

Dataframes and tibbles:

```{r}
my_df <- data.frame(A = 1:3, B = c("X", "Y", "Z"))
my_df

#column-wise

for (col in my_df) {
  print(col)
}

```


For row-wise iteration you can for example use the row index:

```{r}
for (i in 1:nrow(my_df)) {
  print(i)
  #print row i
  print(my_df[i,])
}

```


### If-else in loops

We can now use what we have learned to loop through our `list1` and multiply all numeric values with 10:

```{r}
#to remember contents:
list1
```


```{r}
for (element in list1) {
  if (is.numeric(element)){
    statement <- paste(element, 'times 10 is', element*10)
  } else {
    statement <- paste(element, 'is not a number!')
  }
  print(statement)
}
```

**Note:** that this does not work with a vector, i.e. `vec <- c(1,2,'hello')` because vectors can only contain one data type so all elements of `vec` are characters. 

#### Save results

Let's say we want to save the non-numeric values. We can do this in a list. 

Initiate list for saving non-numeric values.
```{r}
non_numeric_values <- list()
```

Append the non-numeric values to the list.
```{r}
for (element in list1) {
  if (is.numeric(element)){
    next
  } else {
    non_numeric_values <- append(non_numeric_values, element)
  }
}
```

View list.
```{r}
non_numeric_values
```

## While-loop 

While-loops are not commonly used in R since they are ineffective in this language. We will demonstrate how they work since they are common in other programming languages.

Say we want to create a list where each element is the letter "A" followed by a number, starting from 0 and going up to 99 We can do this using a while-loop that keeps appending "A_<count>" to a list until the count reaches 100:

First, let's initially the counter `count` that will count the number of times we go through the while-loop. 
```{r}
count <- 0
list2 <- list()
```

Now, we can make our while-loop. In each iteration we add 1 to the counter.
```{r}
while (count < 100) {
  list2 <- append(list2, paste('A_', count, sep = ''))
  count = count + 1
}
```

Check count
```{r}
count
```

Check length of list as well as the first and the last element. 
```{r}
length(list2) 

list2[[1]]
list2[[length(list2)]]
```

They way you would do it in R:
```{r}
list3 <- paste('A_', 1:100, sep = '') %>% as.list()
# list3
```




