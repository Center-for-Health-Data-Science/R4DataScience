---
title: "Presentation 2: Advanced Data Wrangling"
format: html
project:
 type: website
 output-dir: ../docs
---

## Load packages
```{r warning=FALSE, message=FALSE}
library(readxl)
library(tidyverse)
```

## Load data
```{r}
df_sales <- read_excel('../out/sales_data_2.xlsx')
```

## Formats: Pivot long and wider

In tidyverse we primarily use two different formats: long and wide. The wide format is how you are probably used to seeing data presented with one column for each measured variable. However, when we need to plot, analyse or model data, we will often need them to be in the long format instead. It is therefore important that we know how to switch between them.  

### Pivot into long format

The goal of this section is to make a plot like this where we visualize the sales for each year across each employee.

![](../out/sales_2_plot.png){fig-align="center"}

The data is now in wide format. Can we make the plot in the way the data is formatted now?

<div>
  <a href="#hint-section" class="collapse-toggle" data-bs-toggle="collapse" role="button" aria-expanded="false" aria-controls="hint-section" style="text-decoration: none; font-size: 1em;">
    Hint
  </a>
  <div class="collapse" id="hint-section" style="margin-top: 10px;">
    
  No. To create the plot, we need a column for the years to use on the x-axis, a column for sales in thousands DKK, and a column for Names. While the Names column is already present, the sales data is spread across four separate columns, and there is no column for the year.

  </div>
</div>

```{r}
head(df_sales)
```


The data set is in wide format. The data can be restructured to long format such that there is one line per year per person. For this we use the `pivot_longer` function. 
```{r}
df_sales_longer <- df_sales %>% 
  pivot_longer(cols = starts_with("sales_"),
               names_to = "year",
               values_to = "sales"
               )

head(df_sales_longer)
```

We can transform the year to integer. 
```{r}
df_sales_longer <- df_sales_longer %>% 
  mutate(year = str_remove(year, 'sales_') %>% as.integer()) 

head(df_sales_longer)
```

Make the plot explained above (scatter and line plot over the sales development over the years for each person). 
```{r warning=FALSE}
df_sales_longer %>% 
  ggplot(aes(x = year, 
             y = sales, 
             color = Name)) + 
  geom_point() + 
  geom_line() + 
  theme_bw()

# Saving the plot
# ggsave('../out/sales_2_plot.png', width = 10.37, height = 7.55, units = 'in')
```

### Pivot back into wide format 

The `pivot_wider` function is used to get data to wide format. 
```{r}
df_sales_wider <- df_sales_longer %>% 
  pivot_wider(names_from = year, 
              values_from = sales,
              names_prefix = 'sales_')

# Same content
head(df_sales)
head(df_sales_wider)
```

## Nesting

The long format can contain many repetitions e.g. information on the sales employee in `df_sales_longer` is repeated for every year. Instead of having many nearly identical rows we can use *nesting* to have just one row with the employee information and the associated sales data in its own 'mini-tibble'. 

We'll group data by `Name` and nest `year` and `sales` into a single column that we will name `sales_data`. 

```{r}
df_sales_longer_nested <- df_sales_longer %>%  
  group_by(Name) %>% 
  nest(sales_data = c(year, sales)) %>% 
  ungroup()

head(df_sales_longer_nested)
```

Now we have a structured dataset which is more readable. 

**Note:** Nested data cannot be exported as an Excel or CSV file. Instead, you need to export it as an RDS file, a format specifically designed to save R objects.

We can extract the sales information for a particular employee using the `pull` function.
```{r}
df_sales_longer_nested %>% 
  filter(Name == 'Bob') %>% 
  pull(sales_data)
```

## Tidyverse helpers: `across()` and `where()`

### Using `across()` to select columns

You probably noticed that we used a function to help us to `summarise()` all columns in Presentation 1:

```{r eval=FALSE}
df_tidyverse %>% summarise(across(everything(), ~ sum(is.na(.))))
```

In this section we will say a bit more about the so called tidyverse helpers such as `across()`, `where()`, and `starts_with()`. These helpers are useful when we want to apply a functions, i.e. `summarise()`, or `mutate()` to several columns. 

Let's have an example. We know we can calculate the mean of each sales column like so:

```{r}
df_sales %>%
  summarise(mean(sales_2020),
            mean(sales_2021),
            mean(sales_2022),
            mean(sales_2023))
```
*Note*: We got some `NA`s because sales_2020 and 2022 contain `NA` values and we didn't specify `na.rm=TRUE`. We will continue to see these in the below examples. Don't worry about them for now, we will show you how to deal with them later!

But then we need to name every column we want to apply `summarise` to. `across()` instead lets us select the columns **across** which we want to apply summarise in a dynamic fashion:


```{r warning=FALSE, message=FALSE}
df_sales %>%
  summarise(across(everything(), mean))
```

We put the columns we want to select inside the brackets of `across()`. `everything()`, as you have probably guessed means all columns. 

We will probably not want to calculate means on non-numeric columns, so let's select only numeric columns. For that we need another helper caller `where()` that lets us select columns based on their properties, like data type.

```{r}
df_sales %>%
  summarise(across(where(is.numeric), mean))
```

There is another group of helpers that refers to column names: 

* `starts_with()`
* `ends_with()`
* `contains()`

And we can use them to select only columns starting with 'sales':

```{r}
df_sales %>%
  summarise(across(starts_with('sales'), mean))
```

If the column names follow some pattern like 'sales_XXXX' we can also employ `num_range` to specify them:

```{r}
df_sales %>%
  summarise(across(num_range('sales_', 2020:2023), mean))
```

Lastly, we can always straight up supply the names of the columns we want to select
in a vector:

```{r}
df_sales %>%
  summarise(across(c(sales_2020, sales_2021), mean))
```

All these ways can be used to select columns in tidyverse, also outside of `across()`. As an example, you've already see `starts_with()` in the Long Format section when we selected the columns to convert with `pivot_longer()`:

```{r eval=FALSE}
df_sales %>% 
  pivot_longer(cols = starts_with("sales_"),
               names_to = "year",
               values_to = "sales")
```


### `summarise()` becomes more powerful!

Alright, so we now know how save ourselves from having to name every column we want to operate on, but what if we want to calculate several summary stats? There's more to numbers than means! 

Now that we have `across()` we can supply `summarise` with a list of summary functions to execute:

```{r}
df_sales %>%
  summarise(across(starts_with("sales"), list(mean, sd, min, max)))
```

Now we get one long row with mean, sd, min and max for every column starting with sales.  We're probably not super happy with the column names `sales_2020_1`, `sales_2020_2`, ect, so let's add names that contain the function we're executing (mean, ect). In order for this to work we must also name the functions:


```{r}
df_sales %>%
  summarise(across(starts_with("sales"), 
                   list(mean = mean, sd = sd, min = min, max = max),
                   .names = "{.col}-{.fn}"))
```

Still not your preferred format? You can probably pivot your way out of that!

```{r}
df_sales %>%
  #run summarise on all sales columns
  summarise(across(starts_with("sales"), 
                   list(mean = mean, sd = sd, min = min, max = max),
                   .names = "{.col}-{.fn}")) %>%
  #add reformating
  pivot_longer(cols = everything(), 
               names_to = c("variable", "statistic"), 
               names_sep = "-") %>%
  pivot_wider(names_from = statistic, values_from = value)
```

![](../figures/satisfying_meme.jpg){width=200px}

## The anonymous function: `~` and `.`

But wait! We still have those pesky `NA`s in our summary stats. Let's just add the `na.rm=TRUE` argument. To not have too many things going on at once we'll only do `mean()` for now:

```{r error=TRUE}
df_sales %>%
  summarise(across(starts_with("sales"), 
                   list(mean = mean(na.rm = TRUE)),
                   .names = "{.col}-{.fn}"))
```

Brrrtt! We may not. 

![](../figures/meme_disappointment.png){fig-align="center"}

Why? We are requesting a function call across several columns and we're doing it in shorthand. This is only permitted is there are no arguments to the function (`mean()`, `sd()`, ect). You will also notice that we didn't use brackets after their names, which is part of using the function short hand.  

If we need to pass arguments to functions inside another function call (i.e. calling `mean` inside `summarise`) we need to invoke the **anonymous function**. Don't worry, it is much less ominous than it sounds! It is written as a `~` and looks like this: 

```{r}
df_sales %>%
  summarise(across(starts_with("sales"), 
                   list(mean = ~ mean(., na.rm = TRUE)),
                   .names = "{.col}-{.fn}"))
```

The observant reader will also have noticed that a `.` has appeared in the brackets behind `mean()`. It simply means 'the data previously referred to', in this case every column starting with 'sales'. We need to use the `.` because `mean` when called as a proper function needs to have an argument (a vector of numbers) to work on:

```{r}
mean(df_sales$sales_2020,na.rm=TRUE)
```

So this is it, we invoke the anonymous function for every statistic we want to calculate and now we may pass arguments:

```{r}
df_sales %>%
  #across and starts_with selects columns
  summarise(across(starts_with("sales"), 
                   #list the functions to execute
                   list(mean = ~ mean(., na.rm=T),
                        sd = ~ sd(., na.rm=T), 
                        min = ~ min(., na.rm=T), 
                        max = ~ max(., na.rm=T)),
                   #specify names of output columns
                   .names = "{.col}-{.fn}")) %>%
  
  #add reformating
  pivot_longer(cols = everything(), 
               names_to = c("variable", "statistic"), 
               names_sep = "-") %>%
  pivot_wider(names_from = statistic, values_from = value)
```

### Other usage examples

The anonymous function and `across` are also useful inside `mutate()`! Our data has sales in thousands DKK, so lets multiply every value in every sales column with 1000:

```{r}
df_sales %>% head(n=3)
```


```{r}
df_sales %>%
  mutate(across(starts_with("sales"), ~ . * 1000)) %>%
  head(n=3)
```

![](../figures/meme_move.png){width=400px}

What is happening here is we first select all columns starting with 'sales' by using `across()` and `starts_with()`. Then we say that we want to execute a function on each of these columns. The function shall be 'multiply this column by 1000'. Multiplying by 1000 is written as `* 1000` in R, 'this column' is `.` as we discussed before and `~` tells R that we're executing a function. 

This is it for now but there will be user-defined functions later! 
