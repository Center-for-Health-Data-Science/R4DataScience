---
title: "Presentation 2: Advanced Tidyverse"
format: html
project:
 type: website
 output-dir: ../docs
---

## Load packages
```{r warning=FALSE, message=FALSE}
library(readxl)
library(tidyverse)
library(broom)
```


## Load data
```{r}
df_tidyverse_join <- read_excel('../data/sales_data.xlsx')
```


### Wide format

The data is now in wide format 

```{r}
df_tidyverse_join %>% 
  group_by(City) %>% 
  summarize(sum_sales_2020 = sum(sales_2020, na.rm = TRUE)) %>% 
  ggplot(aes(x = City, 
             y = sum_sales_2020)) + 
  geom_col()
```



We want to make a scatter and line plot over the sales development over the years for each person. Have a look at the data. How would you do this?

```{r}
head(df_tidyverse_join)
```


### Long format


The smart way to do this is to reformat the dataframe such that each person has a line per sales year. This is called the long format. 
USE CASES FOR LONG AND WIDE FORMAT.

11. Make the dataframe wide format like explained above. 
```{r}
df_tidyverse_join_longer <- df_tidyverse_join %>% 
  pivot_longer(cols = starts_with("sales_2"),
               names_to = "year",
               values_to = "sales"
               )

df_tidyverse_join_longer
```

Transform the year to integer. 
```{r}
df_tidyverse_join_longer <- df_tidyverse_join_longer %>% 
  mutate(year = str_remove(year, 'sales_') %>% as.integer(),
         year_factor = year %>% as.factor(),
         ) 

df_tidyverse_join_longer
```


12. Make the plot explain above (scatter and line plot over the sales development over the years for each person). If you are confused, break down the problem: What should be on the x axis? y axis? What kind of geom(s) should be added? Should the plot be stratified using other aesthetics? What can you conclude from the plot. 
```{r}
df_tidyverse_join_longer %>% 
  ggplot(aes(x = year, 
             y = sales, 
             color = Name, 
             group = Name)) + 
  geom_point() + 
  geom_line()
```

Plot distribution of sales across the years. 
```{r}
df_tidyverse_join_longer %>% 
  ggplot(aes(x = year, 
             y = sales)) + 
  geom_col()
```

```{r}
df_tidyverse_join_longer %>% 
  ggplot(aes(x = City, 
             y = sales, 
             fill = year_factor)) + 
  geom_col()
```

Using `pivot_wider` to get data back to wide format. 
```{r}
df_tidyverse_join_wider <- df_tidyverse_join_longer %>% 
  select(!year_factor) %>% 
  pivot_wider(names_from = year, 
              values_from = sales)

# Same content
df_tidyverse_join
df_tidyverse_join_wider
```


### Nesting
Avoid redundant information in dataframe by nesting. Group data by Name and nest year and sales into a single column. 
```{r}
df_tidyverse_join_longer_nested <- df_tidyverse_join_longer %>%  
  group_by(Name) %>% 
  nest(sales_data = c(year_factor, year, sales)) %>% 
  ungroup()

df_tidyverse_join_longer_nested
```

Pull sales data from Bob. 
```{r}
df_tidyverse_join_longer_nested %>% 
  filter(Name == 'Bob') %>% 
  pull(sales_data)
```

Create a model object that models sales across year. 
```{r}
df_tidyverse_join_longer_nested <- df_tidyverse_join_longer_nested %>% 
  mutate(model_object = map(.x = sales_data,
                            .f = ~lm(formula = sales ~ year,
                                     data = .x))
         )

df_tidyverse_join_longer_nested
```



Pull model object from Bob to access the sales trend across the years. 
```{r}
df_tidyverse_join_longer_nested %>% 
  filter(Name == 'Bob') %>% 
  pull(model_object) %>% 
  pluck(1) %>% 
  tidy(conf.int = TRUE,
       conf.level = 0.95)
```

```{r}
df_tidyverse_join_longer_nested %>% 
  filter(Name == 'Sophie') %>% 
  pull(model_object)
```

