---
title: "Presentation 2: Advanced Tidyverse / Pivot longer, wider, and nesting"
format: html
project:
 type: website
 output-dir: ../docs
---

## Load packages
```{r warning=FALSE, message=FALSE}
library(readxl)
library(tidyverse)
```

## Load data
```{r}
df_sales <- read_excel('../out/sales_data_2.xlsx')
```

## Goal 
The goal is to make a plot like this where we visualize the sales for each year across each employee.

![](../out/sales_2_plot.png){fig-align="center"}

The data is now in wide format. Can we make the plot in the way the data is formatted now?

<div>
  <a href="#hint-section" class="collapse-toggle" data-bs-toggle="collapse" role="button" aria-expanded="false" aria-controls="hint-section" style="text-decoration: none; font-size: 1em;">
    Hint
  </a>
  <div class="collapse" id="hint-section" style="margin-top: 10px;">
    
  No. To create the plot, we need a column for the years to use on the x-axis, a column for sales in thousands DKK, and a column for Names. While the Names column is already present, the sales data is spread across four separate columns, and there is no column for the year.

  </div>
</div>

```{r}
head(df_sales)
```


## Long format

The data set is in wide format. The data can be restructured to long format such that there is one line per year per person. For this we use the `pivot_longer` function. 
```{r}
df_sales_longer <- df_sales %>% 
  pivot_longer(cols = starts_with("sales_"),
               names_to = "year",
               values_to = "sales"
               )

head(df_sales_longer)
```

We can transform the year to integer. 
```{r}
df_sales_longer <- df_sales_longer %>% 
  mutate(year = str_remove(year, 'sales_') %>% as.integer()) 

head(df_sales_longer)
```

Make the plot explained above (scatter and line plot over the sales development over the years for each person). 
```{r warning=FALSE}
df_sales_longer %>% 
  ggplot(aes(x = year, 
             y = sales, 
             color = Name)) + 
  geom_point() + 
  geom_line() + 
  theme_bw()

# Saving the plot
# ggsave('../out/sales_2_plot.png', width = 10.37, height = 7.55, units = 'in')
```

## Wide format 
The `pivot_wider` function is used to get data to wide format. 
```{r}
df_sales_wider <- df_sales_longer %>% 
  pivot_wider(names_from = year, 
              values_from = sales,
              names_prefix = 'sales_')

# Same content
head(df_sales)
head(df_sales_wider)
```

## Nesting
The long format can contain many repetitions e.g. information on the sales employee in `df_sales_longer`. Group data by `Name` and nest `year` and `sales` into a single column that we will name `sales_data`. 
```{r}
df_sales_longer_nested <- df_sales_longer %>%  
  group_by(Name) %>% 
  nest(sales_data = c(year, sales)) %>% 
  ungroup()

head(df_sales_longer_nested)
```

**Note:** Nested data cannot be exported as an Excel or CSV file. Instead, you need to export it as an RDS file, a format specifically designed to save R objects.

We can extract the sales information from an employee using the `pull` function.
```{r}
df_sales_longer_nested %>% 
  filter(Name == 'Bob') %>% 
  pull(sales_data)
```

