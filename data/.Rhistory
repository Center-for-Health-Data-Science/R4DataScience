}
# Add birth year to data frame
birth_year <- estimate_birth_year(df[id, 'age'])
df[id, 'birth_year'] <- birth_year
}
df
# Add BMI to data frame
if (df[id, 'age'] >= 18) {
bmi <- calculate_bmi(df[id, 'weight_kg'], df[id, 'height_m'])
df[id, 'bmi'] <- bmi
} else {
df[id, 'bmi'] <- NA
}
# Add birth year to data frame
birth_year <- estimate_birth_year(df[id, 'age'])
# Add birth year to data frame
birth_year <- estimate_birth_year(age = df[id, 'age'])
df[id, 'birth_year'] <- birth_year
for (id in rownames(df)){
# Add BMI to data frame
if (df[id, 'age'] >= 18) {
bmi <- calculate_bmi(df[id, 'weight_kg'], df[id, 'height_m'])
df[id, 'bmi'] <- bmi
} else {
df[id, 'bmi'] <- NA
}
# Add birth year to data frame
birth_year <- estimate_birth_year(age = df[id, 'age'])
df[id, 'birth_year'] <- birth_year
}
calculate_bmi(weight_kg = 70, height_m = 1.80)
calculate_bmi(70, 1.80)
calculate_bmi(1.80, 70)
calculate_bmi(height_m = 1.80, weight_kg = 70)
df
is.numeric(weight_kg)
for (id in rownames(df)){
print(id)
}
?lapply
lapply(df$weight_kg, df$height_m,
FUN = calculate_bmi)
lapply(df$weight_kg, df$height_m, FUN = calculate_bmi)
lapply(c(df$weight_kg, df$height_m), FUN = calculate_bmi)
lapply(df$weight_kg, df$height_m, FUN = calculate_bmi)
apply(df$weight_kg, df$height_m, FUN = calculate_bmi)
sapply(df$weight_kg, df$height_m, FUN = calculate_bmi)
vapply(df$weight_kg, df$height_m, FUN = calculate_bmi)
?mapply
mapply(calculate_bmi, df$weight_kg, df$height_m)
mapply(FUN = calculate_bmi,
weight_kg = df$weight_kg,
height_m = df$height_m)
numbers <- 1:5
names <- c('Thilde', 'Diana', 'Henrike', 'Helene', 'Chelsea', 'Signe')
print(names)
for (name in names){
print(names)
}
enumate(names)
enumate(names)
enumarate(names)
for (i in seq_along(names)){
print(names[i])
}
for (name in names){
print(names)
}
for (name in names){
print(names)
}
print(name)
names <- c('Thilde', 'Diana', 'Henrike', 'Helene', 'Chelsea', 'Signe')
for (name in names){
print(name)
}
for (i in seq_along(names)){
print(names[i])
}
map(estimate_birth_year, c(50, 30, 20))
map(c(50, 30, 20), estimate_birth_year)
map(c(50, 30, 20), estimate_birth_year)
map(c(50, 30, 20), estimate_birth_year)
map(age = c(50, 30, 20), estimate_birth_year)
map(c(50, 30, 20), estimate_birth_year)
calculate_bmi(weight_kg = -50, height_m = 180)
source('./functions.R')
calculate_bmi_2(weight_kg = -50, height_m = 180)
calculate_bmi(weight_kg = -50, height_m = 180)
calculate_bmi_2(weight_kg = -50, height_m = 180)
calculate_bmi_2(weight_kg = 10, height_m = 180)
calculate_bmi_2(weight_kg = 40, height_m = 180)
calculate_bmi(weight_kg = -50, height_m = .180)
calculate_bmi(weight_kg = -50, height_m = 1.80)
calculate_bmi_2(weight_kg = -50, height_m = 1.80)
calculate_bmi_2(weight_kg = 40, height_m = 1.80)
calculate_bmi_2(weight_kg = 30, height_m = 1.80)
calculate_bmi_2(weight_kg = 25, height_m = 1.80)
calculate_bmi_2(weight_kg = -50, height_m = 1.80)
diabetes <- read_excel('~/Desktop/DataLab/R4DataScience/data/diabetes_clinical_toy_messy.xlsx')
for (i in seq_along(names)){
print(names[i])
}
library(tidyverse)
diabetes_glucose
library(tidyverse)
diabetes_glucose <- read_rds('../out/diabetes_glucose.rds')
diabetes_glucose
source(functions.qmd)
source('functions.qmd')
source('./functions.qmd')
source('./functions.qmd')
source('./functions.R')
source('functions.R')
diabetes_glucose %>% unnest(OGTT)
diabetes_glucose # %>% unnest(OGTT)
diabetes_glucose # %>% unnest(OGTT)
source('functions.R')
source('functions.R')
source('functions.R')
density_plot(df = diabetes_glucose, var_num = 'Age')
# 2. Function that take dataframe and a numerical value and returns a density plot.
density_plot <- function(df, var_num){
p <- df %>%
ggplot(aes(x = var_num)) +
geom_density()
return(p)
}
diabetes_glucose
density_plot(df = diabetes_glucose, var_num = Age)
diabetes_glucose
p <- diabetes_glucose %>%
ggplot(aes(x = Age)) +
geom_density()
return(p)
diabetes_glucose %>%
ggplot(aes(x = Age)) +
geom_density()
diabetes_glucose %>%
ggplot(aes(x = 'Age')) +
geom_density()
source('functions.R')
density_plot(df = diabetes_glucose, var_num = 'Age')
density_plot(df = diabetes_glucose, var_num = 'Age')
colnames(diabetes_glucose)
colnames(diabetes_glucose)  %>%  is.numeric()
colnames(diabetes_glucose)  %>%  is.numeric_version()
num_vars <- str(diabetes_glucose)
str(diabetes_glucose)
sapply(dataframe, is.numeric)
sapply(diabetes_glucose, is.numeric)
numerical_columns
sapply(diabetes_glucose, is.numeric)
numerical_columns <- lapply(diabetes_glucose, is.numeric)
numerical_columns
numerical_colnames <- names(diabetes_glucose)[numerical_columns]
numerical_columns
numerical_columns <- sapply(diabetes_glucose, is.numeric)
numerical_columns <- vapply(diabetes_glucose, is.numeric)
numerical_columns <- sapply(diabetes_glucose, is.numeric)
numerical_columns
numerical_colnames <- names(diabetes_glucose)[numerical_columns]
numerical_colnames
for (var_num in numerical_colnames){
density_plot(df = diabetes_glucose, var_num = var_num)
}
for (var_num in numerical_colnames){
p <- density_plot(df = diabetes_glucose, var_num = var_num)
print(p)
}
names(numerical_columns)
numerical_columns
numerical_columns <- sapply(diabetes_glucose, is.numeric)
numerical_colnames <- names(diabetes_glucose)[numerical_columns]
numerical_colnames
names(numerical_columns)
numerical_columns
numerical_colnames <- names(diabetes_glucose)[numerical_columns]
numerical_columns <- sapply(diabetes_glucose, is.numeric)
numerical_colnames <- names(diabetes_glucose)[numerical_columns]
numerical_colnames
# 2. Function that take dataframe and a numerical value and returns a density plot.
bar_plot <- function(df, var_cat){
p <- df %>%
ggplot(aes_string(x = var_cat)) +
geom_cat()
return(p)
}
source('functions.R')
bar_plot(df = diabetes_glucose, var_num = 'Sex')
bar_plot(df = diabetes_glucose, var_cat = 'Sex')
source('functions.R')
bar_plot(df = diabetes_glucose, var_cat = 'Sex')
source('functions.R')
bar_plot(df = diabetes_glucose, var_cat = 'Sex')
categorial_columns <- sapply(diabetes_glucose, is.character|is.factor)
categorial_colnames <- names(diabetes_glucose)[categorial_columns]
categorial_columns <- sapply(diabetes_glucose, is.character || is.factor)
categorial_columns <- sapply(diabetes_glucose, is.character() || is.factor())
categorical_columns <- sapply(diabetes_glucose, function(col) is.character(col) || is.factor(col))
categorial_colnames <- names(diabetes_glucose)[categorial_columns]
categorical_columns <- names(diabetes_glucose)[categorial_columns]
categorical_columns <- sapply(diabetes_glucose, function(col) is.character(col) || is.factor(col))
categorical_columns <- names(diabetes_glucose)[categorical_columns]
categorical_columns <- sapply(diabetes_glucose, function(col) is.character(col) || is.factor(col))
categorical_colnames <- names(diabetes_glucose)[categorical_columns]
categorical_colnames
str(diabetes_glucose)
categorical_columns <- sapply(diabetes_glucose, is.character)
categorical_colnames <- names(diabetes_glucose)[categorical_columns]
categorical_colnames
for (var_cat in numerical_colnames){
p <- density_plot(df = diabetes_glucose, var_cat = var_cat)
print(p)
}
for (var_cat in categorical_colnames){
p <- density_plot(df = diabetes_glucose, var_cat = var_cat)
print(p)
}
categorical_colnames
p <- bar_plot(df = diabetes_glucose, var_cat = var_cat)
for (var_cat in categorical_colnames){
p <- bar_plot(df = diabetes_glucose, var_cat = var_cat)
print(p)
}
table(diabetes_glucose$diabetes_glucose)
table(diabetes_glucose$Work)
library(tidyverse)
library(readxl)
diabetes_clinical <- read_excel('../data/diabetes_clinical_toy_messy.xlsx')
head(diabetes_clinical)
colSums(is.na(diabetes_clinical))
table(diabetes_clinical$Sex)
table(diabetes_clinical$Smoker)
table(diabetes_clinical$Diabetes)
diabetes_clinical %>%
ggplot(aes(y = Age)) +
geom_boxplot()
diabetes_clinical %>%
ggplot(aes(y = BloodPressure)) +
geom_boxplot()
diabetes_clinical %>%
ggplot(aes(y = GeneticRisk)) +
geom_boxplot()
diabetes_clinical %>%
ggplot(aes(y = BMI)) +
geom_boxplot()
diabetes_clinical %>%
ggplot(aes(y = PhysicalActivity)) +
geom_boxplot()
diabetes_clinical$Sex %>% table()
nrow(diabetes_clinical)
diabetes_clinical_clean <- diabetes_clinical %>%
mutate(Sex = str_to_title(Sex),
Diabetes = Diabetes %>% factor()) %>%
filter(BMI != 0, BloodPressure != 0)
diabetes_clinical_clean$Sex %>% table()
nrow(diabetes_clinical_clean)
diabetes_meta <- read_excel('../data/diabetes_meta_toy_messy.xlsx')
head(diabetes_meta)
colSums(is.na(diabetes_meta))
rowSums(is.na(diabetes_meta)) %>% table()
table(diabetes_meta$Married)
table(diabetes_meta$Work)
str_starts('Se.lf-employed', 'S')
str_starts('sSe.lf-employed', 'S')
diabetes_meta_clean <- diabetes_meta %>%
mutate(Married = case_when(str_detect(Married, 'N') ~ 'No',
str_detect(Married, 'Y') ~ 'Yes',
.default = NA
),
Work = case_when(str_starts(Work, 'S') ~ 'Self-employed',
Work %in% c('-Public', '*Public', '*Public', 'P!UBLIC', 'Pu.blic', 'Publ&ic', 'Publi-c', 'Publi+c', 'Public') ~ 'Public',
Wokr %in% c('P#rivate', 'P%rivate', 'Priva.te', 'Privat-e', 'Privat+e', 'Private', 'PRIVATE') ~ 'Private',
.default = NA
),
ID = as.numeric(ID)
)
diabetes_meta_clean <- diabetes_meta %>%
mutate(Married = case_when(str_detect(Married, 'N') ~ 'No',
str_detect(Married, 'Y') ~ 'Yes',
.default = NA
),
Work = case_when(str_starts(Work, 'S') ~ 'Self-employed',
Work %in% c('-Public', '*Public', '*Public', 'P!UBLIC', 'Pu.blic', 'Publ&ic', 'Publi-c', 'Publi+c', 'Public') ~ 'Public',
Work %in% c('P#rivate', 'P%rivate', 'Priva.te', 'Privat-e', 'Privat+e', 'Private', 'PRIVATE') ~ 'Private',
.default = NA
),
ID = as.numeric(ID)
)
head(diabetes_meta_clean)
nrow(diabetes_meta_clean)
library(tidyverse)
library(readxl)
diabetes_clinical <- read_excel('../data/diabetes_clinical_toy_messy.xlsx')
head(diabetes_clinical)
colSums(is.na(diabetes_clinical))
table(diabetes_clinical$Sex)
table(diabetes_clinical$Smoker)
table(diabetes_clinical$Diabetes)
diabetes_clinical %>%
ggplot(aes(y = Age)) +
geom_boxplot()
diabetes_clinical %>%
ggplot(aes(y = BloodPressure)) +
geom_boxplot()
diabetes_clinical %>%
ggplot(aes(y = GeneticRisk)) +
geom_boxplot()
diabetes_clinical %>%
ggplot(aes(y = BMI)) +
geom_boxplot()
diabetes_clinical %>%
ggplot(aes(y = PhysicalActivity)) +
geom_boxplot()
diabetes_clinical$Sex %>% table()
nrow(diabetes_clinical)
diabetes_clinical_clean <- diabetes_clinical %>%
mutate(Sex = str_to_title(Sex),
Diabetes = Diabetes %>% factor()) %>%
filter(BMI != 0, BloodPressure != 0)
diabetes_clinical_clean$Sex %>% table()
nrow(diabetes_clinical_clean)
diabetes_meta <- read_excel('../data/diabetes_meta_toy_messy.xlsx')
head(diabetes_meta)
colSums(is.na(diabetes_meta))
rowSums(is.na(diabetes_meta)) %>% table()
table(diabetes_meta$Married)
table(diabetes_meta$Work)
nrow(diabetes_meta)
diabetes_meta_clean <- diabetes_meta %>%
mutate(Married = case_when(str_detect(Married, 'N') ~ 'No',
str_detect(Married, 'Y') ~ 'Yes',
.default = NA
),
Work = case_when(str_starts(Work, 'S') ~ 'Self-employed',
Work %in% c('-Public', '*Public', '*Public', 'P!UBLIC', 'Pu.blic', 'Publ&ic', 'Publi-c', 'Publi+c', 'Public') ~ 'Public',
Work %in% c('P#rivate', 'P%rivate', 'Priva.te', 'Privat-e', 'Privat+e', 'Private', 'PRIVATE') ~ 'Private',
.default = NA
),
ID = as.numeric(ID)
)
head(diabetes_meta_clean)
nrow(diabetes_meta_clean)
diabetes_join <- diabetes_clinical_clean %>%
left_join(diabetes_meta_clean, by = 'ID')
nrow(diabetes_join)
writexl::write_xlsx(diabetes_join, '../out/diabetes_join.xlsx')
library(tidyverse)
source('functions.R')
diabetes_glucose <- read_rds('../out/diabetes_glucose.rds')
density_plot(df = diabetes_glucose, var_num = 'Age')
numerical_columns <- sapply(diabetes_glucose, is.numeric)
numerical_colnames <- names(diabetes_glucose)[numerical_columns]
for (var_num in numerical_colnames){
p <- density_plot(df = diabetes_glucose, var_num = var_num)
print(p)
}
bar_plot(df = diabetes_glucose, var_cat = 'Sex')
categorical_columns <- sapply(diabetes_glucose, is.character)
categorical_colnames <- names(diabetes_glucose)[categorical_columns]
for (var_cat in categorical_colnames){
p <- bar_plot(df = diabetes_glucose, var_cat = var_cat)
print(p)
}
# 10. Like #2 density_plot, with error handling
density_plot_2 <- function(df, var_num){
# Error if var_num is not numcerical
if (is.numeric(df[var_num])){
stop('The numerical variable (var_num) must be numcerial.')
}
p <- df %>%
ggplot(aes_string(x = var_num)) +
geom_density()
return(p)
}
source('functions.R')
density_plot_2(df = diabetes_glucose, var_num = 'Sex')
source('functions.R')
density_plot_2(df = diabetes_glucose, var_num = 'Sex')
source('functions.R')
source('functions.R')
source('./functions.R')
source('functions.R')
source('functions.R')
bar_2(df = diabetes_glucose, var_cat = 'Sex')
bar_plot_2(df = diabetes_glucose, var_cat = 'Sex')
bar_plot_2(df = diabetes_glucose, var_cat = 'Sex')
source('functions.R')
bar_plot_2(df = diabetes_glucose, var_cat = 'Sex')
source('functions.R')
bar_plot_2(df = diabetes_glucose, var_cat = 'Sex')
var_cat = 'Sex'
!is.character(df[var_cat])
!is.character(diabetes_glucose[var_cat])
!is.character(diabetes_glucose[var_cat]) & !is.factor(diabetes_glucose[var_cat])
!is.character(diabetes_glucose[var_cat]) | !is.factor(diabetes_glucose[var_cat])
!(is.character(diabetes_glucose[var_cat]) | is.factor(diabetes_glucose[var_cat]))
!(is.character(diabetes_glucose[var_cat]) & is.factor(diabetes_glucose[var_cat]))
!(is.character(diabetes_glucose[var_cat]) || is.factor(diabetes_glucose[var_cat]))
tyor(diabetes_glucose[var_cat])
type(diabetes_glucose[var_cat])
class(diabetes_glucose[var_cat])
is.character(diabetes_glucose[[var_cat]])
!(is.character(diabetes_glucose[[var_cat]]) || is.factor(diabetes_glucose[[var_cat]]))
df[[var_num]]
diabetes_glucose[[var_cat]]
diabetes_glucose[var_cat]
!(is.character(diabetes_glucose[[var_cat]]) || is.factor(diabetes_glucose[[var_cat]]))
!(is.character(diabetes_glucose[[var_cat]]) | is.factor(diabetes_glucose[[var_cat]]))
c(FALSE, TRUE)
# 14. Like #7 density_plot, with error handling
bar_plot_2 <- function(df, var_cat){
# Error if var_num is not numcerical
if (!(is.character(diabetes_glucose[[var_cat]]) || is.factor(diabetes_glucose[[var_cat]]))){
stop('The categorical variable (var_cat) must be a character or factor.')
} else {
continue
}
p <- df %>%
ggplot(aes_string(x = var_cat)) +
geom_bar()
return(p)
}
var1 <- c(5, 6)
var2 <- c(5, 7)
var3 <- c(10, 6)
# Element-wise comparison
var1 == var2 | var1 == var3
var1 == var2 || var1 == var3
var1 <- c(5, 6)
var2 <- c(5, 7)
var3 <- c(10, 6)
# Element-wise comparison
var1 == var2 | var1 == var3
var1 == var2 || var1 == var3
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
setwd("~/Desktop/Stuff/Courses/GreatestCourse/FromExceltoR/")
setwd("~/Desktop/Stuff/Courses/GreatestCourse/FromExceltoR/")
getwd()
getwd()
a <- 5
b <- 5
c <- 7
# Element-wise comparison
a == b | a == c
a == b || a == c
var1 <- c(5, 6)
var2 <- c(5, 7)
var3 <- c(10, 6)
# Element-wise comparison
var1 == var2 | var1 == var3
var1 == var2 || var1 == var3
# Element-wise comparison
var1 == var2 | var1 == var3
var1 == var2 || var1 == var3
a <- 5
b <- 5
c <- 7
# Element-wise comparison
a == b | a == c
a == b || a == c
var1 <- c(5, 6)
var2 <- c(5, 7)
var3 <- c(10, 6)
# Element-wise comparison
var1 == var2 | var1 == var3
var1 == var2 || var1 == var3
# Element-wise comparison
a == b | a == c
source('functions.R')
bar_plot_2(df = diabetes_glucose, var_cat = 'Sex')
source('functions.R')
bar_plot_2(df = diabetes_glucose, var_cat = 'Sex')
bar_plot_2(df = diabetes_glucose, var_cat = 'Age')
bar_plot_2(df = diabetes_glucose, var_cat = 'Sex')
bar_plot_2(df = diabetes_glucose, var_cat = 'Age')
for (var_num in numerical_colnames){
p <- density_plot(df = diabetes_glucose, var_num = var_num)
print(p)
ggsave(glue("../out/density_{var_num}.png"))
}
library(glue)
for (var_num in numerical_colnames){
p <- density_plot(df = diabetes_glucose, var_num = var_num)
print(p)
ggsave(glue("../out/density_{var_num}.png"))
}
library(tidyverse)
library(glue)
source('functions.R')
diabetes_glucose <- read_rds('../out/diabetes_glucose.rds')
boxplot(df = diabetes_glucose, var_num = 'Age')
numerical_columns <- sapply(diabetes_glucose, is.numeric)
numerical_colnames <- names(diabetes_glucose)[numerical_columns]
for (var_num in numerical_colnames){
p <- boxplot(df = diabetes_glucose, var_num = var_num)
print(p)
# ggsave(glue("../out/boxplot_{var_num}.png"))
}
bar_plot(df = diabetes_glucose, var_cat = 'Sex')
categorical_columns <- sapply(diabetes_glucose, is.character)
categorical_colnames <- names(diabetes_glucose)[categorical_columns]
for (var_cat in categorical_colnames){
p <- bar_plot(df = diabetes_glucose, var_cat = var_cat)
print(p)
# ggsave(glue("../out/bar_plot_{var_cat}.png"))
}
boxplot_2(df = diabetes_glucose, var_num = 'Sex')
boxplot_2(df = diabetes_glucose, var_num = 'Sex')
bar_plot_2(df = diabetes_glucose, var_cat = 'Age')
bar_plot_2(df = diabetes_glucose, var_cat = 'Age')
