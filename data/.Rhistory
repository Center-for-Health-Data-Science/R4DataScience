ID = sample(10),
City = c("New York", "LA", "New York", "Chicago", "Miami", "Miami", "LA", "Chicago", "LA", "New York")
)
head(df_location)
# Base R
df_baseR_merged <- merge(df_baseR, df_location, by = 'ID')
head(df_baseR_merged)
# Tidyverse
df_tidyverse_join <- df_tidyverse %>% left_join(df_location, by = 'ID')
head(df_tidyverse_join)
# Base R
colSums(is.na(df_baseR))
# Tidyverse
df_tidyverse %>% summarise(across(everything(), ~ sum(is.na(.))))
# Base R
df_baseR_no_na <- df_baseR[complete.cases(df_baseR), ]
# Tidyverse
df_tidyverse_no_na <- df_tidyverse %>% drop_na()
# Base R
df_baseR[order(-df_baseR$sales_2022) ,]
# Tidyverse
df_tidyverse %>% arrange(desc(sales_2022))
#base R
class(df_baseR$Age)
#tidyserve
df_tidyverse_join %>%
map_chr(typeof)
head(df_tidyverse_join)
df_tidyverse_join
# Tidyverse
df_tidyverse_join %>% count(City)
# Base R
table(df_baseR_merged$City)
# Tidyverse
df_tidyverse_join %>% select(City) %>% count()
df_tidyverse_join %>% select(City)
# Tidyverse
df_tidyverse_join %>% select(City) %>% distinct()
# Tidyverse
df_tidyverse_join %>% select(City) %>% count()
?count
# Tidyverse
df_tidyverse_join %>% summarise(count = count(City))
# Tidyverse
df_tidyverse_join %>% count(City)
colnames(df_tidyverse_join)
# Tidyverse
df_tidyverse_join %>% count(City)
# Tidyverse
df_tidyverse_join %>% count(`City`)
# Tidyverse
df_tidyverse_join %>% count(`City`)
df_tidyverse_join
# Tidyverse
df_tidyverse_join %>% unnest() %>% count(City)
# Tidyverse
df_tidyverse_join %>% dplyr::count(City)
# Base R
range(df_baseR$Age, na.rm = TRUE)
# Tidyverse
df_tidyverse %>%
summarise(min_value = min(Age, na.rm = TRUE),
max_value = max(Age, na.rm = TRUE))
#base R
#no native violin plots, but you could use the vioplot package
hist(df_tidyverse_join$Age)
df_baseR <- readxl::read_excel('../data/df_sales_1.xlsx') %>% as.data.frame()
df_tidyverse <- readxl::read_excel('../data/df_sales_1.xlsx') %>% as_tibble()
paste('Alice', 'Hansen')
paste('Alice', 'Hansen', sep = "_")
df_tidyverse_join <- df_tidyverse_join %>%
mutate(Name = paste(Name, 'Hansen'))
head(df_tidyverse_join)
str_split('Alice Hansen', pattern = ' ')
str_split('Alice_Hansen_Jensen', pattern = '_')
df_tidyverse_join <- df_tidyverse_join %>%
mutate(Name = str_split(Name, pattern = ' ')[1])
head(df_tidyverse_join)
library(tidyverse)
library(ggforce)
df_baseR <- readxl::read_excel('../data/df_sales_1.xlsx') %>% as.data.frame()
df_tidyverse <- readxl::read_excel('../data/df_sales_1.xlsx') %>% as_tibble()
class(df_baseR)
class(df_tidyverse)
# Base R
df_baseR['Age']
# Tidyverse
df_tidyverse %>% select(Age)
# Base R
df_baseR[['Age']]
df_tidyverse$Age
# Tidyverse
df_tidyverse %>% pull(Age)
# Base R
df_baseR$mood <- "happy"
# Tidyverse
df_tidyverse <- df_tidyverse %>%
mutate(mood = "happy")
# Base R
df_baseR$sales_diff <- df_baseR$sales_2022 - df_baseR$sales_2020
# Tidyverse
df_tidyverse <- df_tidyverse %>%
mutate(sales_diff = sales_2022 - sales_2020)
# Base R
df_baseR$sales_diff <- NULL
# Tidyverse
df_tidyverse <- df_tidyverse %>%
select(-sales_diff)
# Base R
df_baseR$raise <- ifelse(df_baseR$sales_2023 > df_baseR$sales_2022, "yes", "no")
# Tidyverse
df_tidyverse <- df_tidyverse %>%
mutate(raise = ifelse(sales_2023 > sales_2022, "yes", "no"))
# Base R
df_baseR$group <- ifelse(df_baseR$Age < 30 & df_baseR$Sex == "Female", "young_female",
ifelse(df_baseR$Age < 30 & df_baseR$Sex == "Male", "young_male",
ifelse(df_baseR$Age >= 30 & df_baseR$Sex == "Female", "mature_female",
ifelse(df_baseR$Age >= 30 & df_baseR$Sex == "Male", "mature_male", NA))))
# Tidyverse
df_tidyverse <- df_tidyverse %>%
mutate(group = case_when(Age < 30 & Sex == "Female" ~ "young_female",
Age < 30 & Sex == "Male" ~ "young_male",
Age >= 30 & Sex == "Female" ~ "mature_female",
Age >= 30 & Sex == "Male" ~ "mature_male",
.default = NA))
# Base R
df_baseR[, startsWith(colnames(df_baseR), 'sales_')]
# Tidyverse
df_tidyverse %>%
select(starts_with('sales_'))
# Base R
df_baseR[df_baseR$Age > 25 ,]
# Tidyverse
df_tidyverse %>%
filter(Age > 25)
# Base R
df_baseR[!is.na(df_baseR$Age) & !is.na(df_baseR$sales_2022) &
df_baseR$Age <= 30 & df_baseR$sales_2022 > 200 ,]
# Tidyverse
df_tidyverse %>%
filter(Age <= 30, sales_2022 > 200)
# Base R, NAs not removed
df_baseR[!is.na(df_baseR$Age) & !is.na(df_baseR$sales_2022) &
df_baseR$Age <= 30 & df_baseR$sales_2022 > 200 , c('Age', 'Sex')]
# Shorter Base R if there are no NAs:
# df_baseR_no_na[df_baseR_no_na$Age <= 30 & df_baseR_no_na$sales_2022 > 200 , c('Age', 'Sex')]
# Tidyverse
df_tidyverse %>%
filter(Age <= 30, sales_2022 > 200) %>%
select(Age, Sex)
set.seed(101)
df_location <- data.frame(
ID = sample(10),
City = c("New York", "LA", "New York", "Chicago", "Miami", "Miami", "LA", "Chicago", "LA", "New York")
)
head(df_location)
# Base R
df_baseR_merged <- merge(df_baseR, df_location, by = 'ID')
head(df_baseR_merged)
# Tidyverse
df_tidyverse_join <- df_tidyverse %>% left_join(df_location, by = 'ID')
head(df_tidyverse_join)
# Base R
colSums(is.na(df_baseR))
# Tidyverse
df_tidyverse %>% summarise(across(everything(), ~ sum(is.na(.))))
# Base R
df_baseR_no_na <- df_baseR[complete.cases(df_baseR), ]
# Tidyverse
df_tidyverse_no_na <- df_tidyverse %>% drop_na()
# Base R
df_baseR[order(-df_baseR$sales_2022) ,]
# Tidyverse
df_tidyverse %>% arrange(desc(sales_2022))
#base R
class(df_baseR$Age)
#tidyserve
df_tidyverse_join %>%
map_chr(typeof)
head(df_tidyverse_join)
# Base R
table(df_baseR_merged$City)
# Tidyverse
df_tidyverse_join %>% dplyr::count(City)
# Base R
range(df_baseR$Age, na.rm = TRUE)
# Tidyverse
df_tidyverse %>%
summarise(min_value = min(Age, na.rm = TRUE),
max_value = max(Age, na.rm = TRUE))
#base R
#no native violin plots, but you could use the vioplot package
hist(df_tidyverse_join$Age)
#tidyverse:
ggplot(df_tidyverse_join, aes(x=1,y=Age)) +
geom_violin()
#if you want to add dots for the actual data points
#geom_sina()
ggplot(df_tidyverse_join, aes(x=Age)) +
geom_histogram(bins = 5)
paste('Alice', 'Hansen')
paste('Alice', 'Hansen', sep = "_")
df_tidyverse_join <- df_tidyverse_join %>%
mutate(Name = paste(Name, 'Hansen'))
head(df_tidyverse_join)
str_split('Alice Hansen', pattern = ' ')
str_split('Alice_Hansen_Jensen', pattern = '_')
df_tidyverse_join
str_split('Alice Hansen', pattern = ' ')[1]
str_split('Alice Hansen', pattern = ' ')
str_split('Alice Hansen', pattern = ' ')[[1]][1]
str_split('Alice Hansen', pattern = ' ')[[1]]
str_split('Alice Hansen', pattern = ' ')[[1]][1]
str_split('Alice Hansen', pattern = ' ')[1,1]
df_tidyverse_join <- df_tidyverse_join %>%
mutate(Name = str_split(Name, pattern = ' ')[[1]][1])
head(df_tidyverse_join)
library(tidyverse)
library(ggforce)
df_baseR <- readxl::read_excel('../data/df_sales_1.xlsx') %>% as.data.frame()
df_tidyverse <- readxl::read_excel('../data/df_sales_1.xlsx') %>% as_tibble()
class(df_baseR)
class(df_tidyverse)
# Base R
df_baseR['Age']
# Tidyverse
df_tidyverse %>% select(Age)
# Base R
df_baseR[['Age']]
df_tidyverse$Age
# Tidyverse
df_tidyverse %>% pull(Age)
# Base R
df_baseR$mood <- "happy"
# Tidyverse
df_tidyverse <- df_tidyverse %>%
mutate(mood = "happy")
# Base R
df_baseR$sales_diff <- df_baseR$sales_2022 - df_baseR$sales_2020
# Tidyverse
df_tidyverse <- df_tidyverse %>%
mutate(sales_diff = sales_2022 - sales_2020)
# Base R
df_baseR$sales_diff <- NULL
# Tidyverse
df_tidyverse <- df_tidyverse %>%
select(-sales_diff)
# Base R
df_baseR$raise <- ifelse(df_baseR$sales_2023 > df_baseR$sales_2022, "yes", "no")
# Tidyverse
df_tidyverse <- df_tidyverse %>%
mutate(raise = ifelse(sales_2023 > sales_2022, "yes", "no"))
# Base R
df_baseR$group <- ifelse(df_baseR$Age < 30 & df_baseR$Sex == "Female", "young_female",
ifelse(df_baseR$Age < 30 & df_baseR$Sex == "Male", "young_male",
ifelse(df_baseR$Age >= 30 & df_baseR$Sex == "Female", "mature_female",
ifelse(df_baseR$Age >= 30 & df_baseR$Sex == "Male", "mature_male", NA))))
# Tidyverse
df_tidyverse <- df_tidyverse %>%
mutate(group = case_when(Age < 30 & Sex == "Female" ~ "young_female",
Age < 30 & Sex == "Male" ~ "young_male",
Age >= 30 & Sex == "Female" ~ "mature_female",
Age >= 30 & Sex == "Male" ~ "mature_male",
.default = NA))
# Base R
df_baseR[, startsWith(colnames(df_baseR), 'sales_')]
# Tidyverse
df_tidyverse %>%
select(starts_with('sales_'))
# Base R
df_baseR[df_baseR$Age > 25 ,]
# Tidyverse
df_tidyverse %>%
filter(Age > 25)
# Base R
df_baseR[!is.na(df_baseR$Age) & !is.na(df_baseR$sales_2022) &
df_baseR$Age <= 30 & df_baseR$sales_2022 > 200 ,]
# Tidyverse
df_tidyverse %>%
filter(Age <= 30, sales_2022 > 200)
# Base R, NAs not removed
df_baseR[!is.na(df_baseR$Age) & !is.na(df_baseR$sales_2022) &
df_baseR$Age <= 30 & df_baseR$sales_2022 > 200 , c('Age', 'Sex')]
# Shorter Base R if there are no NAs:
# df_baseR_no_na[df_baseR_no_na$Age <= 30 & df_baseR_no_na$sales_2022 > 200 , c('Age', 'Sex')]
# Tidyverse
df_tidyverse %>%
filter(Age <= 30, sales_2022 > 200) %>%
select(Age, Sex)
set.seed(101)
df_location <- data.frame(
ID = sample(10),
City = c("New York", "LA", "New York", "Chicago", "Miami", "Miami", "LA", "Chicago", "LA", "New York")
)
head(df_location)
# Base R
df_baseR_merged <- merge(df_baseR, df_location, by = 'ID')
head(df_baseR_merged)
# Tidyverse
df_tidyverse_join <- df_tidyverse %>% left_join(df_location, by = 'ID')
head(df_tidyverse_join)
# Base R
colSums(is.na(df_baseR))
# Tidyverse
df_tidyverse %>% summarise(across(everything(), ~ sum(is.na(.))))
# Base R
df_baseR_no_na <- df_baseR[complete.cases(df_baseR), ]
# Tidyverse
df_tidyverse_no_na <- df_tidyverse %>% drop_na()
# Base R
df_baseR[order(-df_baseR$sales_2022) ,]
# Tidyverse
df_tidyverse %>% arrange(desc(sales_2022))
#base R
class(df_baseR$Age)
#tidyserve
df_tidyverse_join %>%
map_chr(typeof)
head(df_tidyverse_join)
# Base R
table(df_baseR_merged$City)
# Tidyverse
df_tidyverse_join %>% dplyr::count(City)
# Base R
range(df_baseR$Age, na.rm = TRUE)
# Tidyverse
df_tidyverse %>%
summarise(min_value = min(Age, na.rm = TRUE),
max_value = max(Age, na.rm = TRUE))
#base R
#no native violin plots, but you could use the vioplot package
hist(df_tidyverse_join$Age)
#tidyverse:
ggplot(df_tidyverse_join, aes(x=1,y=Age)) +
geom_violin()
#if you want to add dots for the actual data points
#geom_sina()
ggplot(df_tidyverse_join, aes(x=Age)) +
geom_histogram(bins = 5)
paste('Alice', 'Hansen')
paste('Alice', 'Hansen', sep = "_")
df_tidyverse_join <- df_tidyverse_join %>%
mutate(Name = paste(Name, 'Hansen'))
head(df_tidyverse_join)
str_split('Alice Hansen', pattern = ' ')
str_split('Alice_Hansen_Jensen', pattern = '_')
df_tidyverse_join %>%
mutate(Name = str_split(Name, pattern = ' ')[[1]][1])
Name
df_tidyverse_join
df_tidyverse_join %>%
mutate(Name = str_split(Name, pattern = ' ')[[1]][1])
Name
df_tidyverse_join %>%
mutate(Name = str_split(Name, pattern = ' ')[[1]][1])
df_tidyverse_join %>%
mutate(Name = str_split_i(Name, pattern = ' ', i = 1))
df_tidyverse_join
df_tidyverse_join2$raise
df_tidyverse_join$raise
grep('yes', df_tidyverse_join$raise)
grep('yes', df_tidyverse_join$raise, fixed = TRUE)
df_tidyverse_join$raise
grep('yes', df_tidyverse_join$raise)
grep('yes', df_tidyverse_join$raise, value = TRUE)
grep('y', df_tidyverse_join$raise, value = TRUE)
?grepl
grep('maybe', df_tidyverse_join$raise # can handle substrings
)
grep('maybe', df_tidyverse_join$raise, value = TRUE) # can handle substrings
grep('maybe', df_tidyverse_join$raise)
grepl(pattern = 'yes', df_tidyverse_join$raise)
grep(pattern = 'yes', df_tidyverse_join$raise) # Returns indexes of values that match
grepl(pattern = 'yes', df_tidyverse_join$raise)
grepl(pattern = 'y', df_tidyverse_join$raise)
grepl(pattern = 'maybe', df_tidyverse_join$raise)
gsub(pattern = "yes", replacement = "YES", df_tidyverse_join$raise)
df_tidyverse_join$raise
gsub(pattern = "yes", replacement = "YES", df_tidyverse_join$raise)
?gsub
df_tidyverse_join$raise
?seqalong
?seq_along
seq_along(df_tidyverse_join$raise, str_split_i(i = 2))
rep(5, 3)
?rep
a <- c(rep(x = 5, times = 3), rep(x = 7, times = 3))
a
rev(a)
df_tidyverse_join$raise[1]
df_tidyverse_join$Name[1]
df_tidyverse_join$Name[1:5]
df_tidyverse_join$Name[2:5]
df_tidyverse_join$Name
df_tidyverse_join$Name[1]
df_tidyverse_join$Name[1:5]
df_tidyverse_join$Name[2:5]
df_tidyverse_join$Name[2:6:2]
df_tidyverse_join$Name[2:-2]
df_tidyverse_join$Name[0]
?select_if
df_sales
df_sales
library(readxl)
library(tidyverse)
df_sales <- read_excel('../out/sales_data_2.xlsx')
head(df_sales)
df_sales_longer <- df_sales %>%
pivot_longer(cols = starts_with("sales_"),
names_to = "year",
values_to = "sales"
)
head(df_sales_longer)
df_sales_longer <- df_sales_longer %>%
mutate(year = str_remove(year, 'sales_') %>% as.integer())
head(df_sales_longer)
df_sales_longer %>%
ggplot(aes(x = year,
y = sales,
color = Name)) +
geom_point() +
geom_line() +
theme_bw()
# Saving the plot
# ggsave('../out/sales_2_plot.png', width = 10.37, height = 7.55, units = 'in')
df_sales_wider <- df_sales_longer %>%
pivot_wider(names_from = year,
values_from = sales,
names_prefix = 'sales_')
# Same content
head(df_sales)
head(df_sales_wider)
df_sales_longer_nested <- df_sales_longer %>%
group_by(Name) %>%
nest(sales_data = c(year, sales)) %>%
ungroup()
head(df_sales_longer_nested)
df_sales_longer_nested %>%
filter(Name == 'Bob') %>%
pull(sales_data)
df_sales_longer_nested %>%
unnest(sales_data) %>%
summarise(mean_sales = mean(sales, na.rm = T))
df_sales %>%
summarise(mean(sales_2020),
mean(sales_2021),
mean(sales_2022),
mean(sales_2023))
df_sales %>%
summarise(across(everything(), mean))
df_sales %>%
summarise(across(where(is.numeric), mean))
df_sales %>%
summarise(across(starts_with('sales'), mean))
df_sales %>%
summarise(across(num_range('sales_', 2020:2023), mean))
df_sales %>%
summarise(across(c(sales_2020, sales_2021), mean))
df_sales %>%
summarise(across(starts_with("sales"), list(mean, sd, min, max)))
df_sales %>%
summarise(across(starts_with("sales"),
list(mean = mean, sd = sd, min = min, max = max),
.names = "{.col}-{.fn}"))
df_sales %>%
#run summarise on all sales columns
summarise(across(starts_with("sales"),
list(mean = mean, sd = sd, min = min, max = max),
.names = "{.col}-{.fn}")) %>%
#add reformating
pivot_longer(cols = everything(),
names_to = c("variable", "statistic"),
names_sep = "-") %>%
pivot_wider(names_from = statistic, values_from = value)
df_sales %>%
summarise(across(starts_with("sales"),
list(mean = mean(na.rm = TRUE)),
.names = "{.col}-{.fn}"))
df_sales %>%
summarise(across(starts_with("sales"),
list(mean = ~ mean(., na.rm = TRUE)),
.names = "{.col}-{.fn}"))
mean(df_sales$sales_2020,na.rm=TRUE)
df_sales %>%
#across and starts_with selects columns
summarise(across(starts_with("sales"),
#list the functions to execute
list(mean = ~ mean(., na.rm=T),
sd = ~ sd(., na.rm=T),
min = ~ min(., na.rm=T),
max = ~ max(., na.rm=T)),
#specify names of output columns
.names = "{.col}-{.fn}")) %>%
#add reformating
pivot_longer(cols = everything(),
names_to = c("variable", "statistic"),
names_sep = "-") %>%
pivot_wider(names_from = statistic, values_from = value)
df_sales %>% head(n=3)
df_sales %>%
mutate(across(starts_with("sales"), ~ . * 1000)) %>%
head(n=3)
df_sales %>%
mutate(across(starts_with("sales"), ~ replace_na(.,0)))
df_sales
df_sales %>% select_if(starts_with('sales'))
df_sales %>% select(starts_with('sales'))
df_sales %>% select(starts_with('sales')) %>% head()
df_sales %>% select_if(is.numeric()) %>% head()
df_sales %>% select_if(~ !any(is.na(.)))
df_sales %>% select_if(~ any(is.na(.)))
df_sales %>% select_if(~ any(is.na(.))) %>% head()
